<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nemiro.OAuth</name>
    </assembly>
    <members>
        <member name="T:Nemiro.OAuth.AccessToken">
            <summary>
            Represents base properties and method for access token results.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.RequestResult">
            <summary>
            Represents the base class for results of remote requests.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.RequestResult.#ctor(Nemiro.OAuth.RequestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.RequestResult"/> class.
            </summary>
            <param name="result">The request results.</param>
        </member>
        <member name="M:Nemiro.OAuth.RequestResult.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.RequestResult"/> class.
            </summary>
            <param name="contentType">The content type of the response.</param>
            <param name="source">The source  of the response.</param>
        </member>
        <member name="M:Nemiro.OAuth.RequestResult.ParseSource(System.String,System.String)">
            <summary>
            Parses the source to the <see cref="P:Nemiro.OAuth.RequestResult.Result"/>.
            </summary>
            <param name="contentType">The content type of the response.</param>
            <param name="source">The source  of the response.</param>
        </member>
        <member name="M:Nemiro.OAuth.RequestResult.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="P:Nemiro.OAuth.RequestResult.Result"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="P:Nemiro.OAuth.RequestResult.Result"/>.</param>
            <returns><b>true</b> if the <see cref="P:Nemiro.OAuth.RequestResult.Result"/> contains an element with the specified key; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Nemiro.OAuth.RequestResult.ToString">
            <summary>
            Returs the <see cref="P:Nemiro.OAuth.RequestResult.Source"/>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.ContentType">
            <summary>
            Gets or sets the content type of the response.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.Source">
            <summary>
            Gets or sets the source of the response.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.Result">
            <summary>
            Gets or sets the processed result of the response.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.Item(System.String)">
            <summary>
            Gets the value associated with the specified key of the <see cref="P:Nemiro.OAuth.RequestResult.Result"/>.
            </summary>
            <param name="key">The key of the value to get.</param>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.Item(System.Int32)">
            <summary>
            Gets the value associated with the specified index of the <see cref="P:Nemiro.OAuth.RequestResult.Result"/>.
            </summary>
            <param name="index">The index of the value to get.</param>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.IsArray">
            <summary>
            Gets a value indicating whether the <see cref="P:Nemiro.OAuth.RequestResult.Result"/> is array or not.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.IsDictionary">
            <summary>
            Gets a value indicating whether the <see cref="P:Nemiro.OAuth.RequestResult.Result"/> is <see cref="T:System.Collections.Generic.Dictionary`2"/> or not.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.IsNameValueCollection">
            <summary>
            Gets a value indicating whether the <see cref="P:Nemiro.OAuth.RequestResult.Result"/> is <see cref="T:System.Collections.Specialized.NameValueCollection"/> or not.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.IsXml">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameValueCollection"/> is XML or not.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.RequestResult.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Specialized.NameValueCollection"/> is empty or not.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.AccessToken.#ctor(Nemiro.OAuth.RequestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.AccessToken"/> class.
            </summary>
            <param name="result">Result of request to the OAuth server.</param>
        </member>
        <member name="M:Nemiro.OAuth.AccessToken.ToString">
            <summary>
            Returns the <see cref="P:Nemiro.OAuth.AccessToken.Value"/>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AccessToken.Value">
            <summary>
            The access token issued by the authorization server.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.AuthorizationResult">
            <summary>
            Represents authorization results.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.AuthorizationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.AuthorizationResult"/> class.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.ProtocolVersion">
            <summary>
            OAuth version. For example: 1.0, 2.0.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.ProviderName">
            <summary>
            Provider name. For example: facebook, twitter, google.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.AccessToken">
            <summary>
            The access token which is used to query the provider.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.UserInfo">
            <summary>
            The user profile details that is returned from the provider.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.IsSuccessfully">
            <summary>
            Gets a value indicating whether the authorization is successful.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.ErrorInfo">
            <summary>
            Gets error info when the authorization is not successful.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.UserId">
            <summary>
            Gets the user ID that is returned from the provider.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.UserName">
            <summary>
            Gets the username that is returned from the provider.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.AuthorizationResult.AccessTokenValue">
            <summary>
            Gets the access token value.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.GoogleClient">
            <summary>
            OAuth client for <b>Google</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a Google Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://console.developers.google.com">Google Developers Console</see></b> and <b>Create Project</b>.</para>
            <para>
            <img src="../img/google001.png" alt="Create new project button"/>
            </para>
            <para>Enter the project name and click the <b>Create</b>.</para>
            <para>
            <img src="../img/google002.png" alt="Create new project form"/>
            </para>
            <para>
            Click to the <b>Credential</b> menu in the <b>APIs &amp; OAuth</b>.
            </para>
            <para>
            <img src="../img/google003.png" alt="Credential menu"/>
            </para>
            <para>
            For <b>desktop application</b>, click the <b>Create new Client ID</b>, select <b>Installed application</b> and <b>Other</b>.
            </para>
            <para>
            Click the <b>Create Client ID</b> to complete.
            </para>
            <para>
            <img src="../img/google004.png" alt="Create new Client ID for desktop application"/>
            </para>
            <para>
            You will get the <b>Client ID</b> and <b>Client Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.GoogleClient"/>.
            </para>
            <para>
            <img src="../img/google005.png" alt="Create new Client ID for desktop application"/>
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new GoogleClient
              (
                "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com", 
                "AeEbEGQqoKgOZb41JUVLvEJL"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New GoogleClient _
              (
                "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com", 
                "AeEbEGQqoKgOZb41JUVLvEJL"
              )
            )
            </code>
            <para>For <b>web projects</b> create another <b>Client ID</b>. In the form select the <b>Web application</b> and specify return addresses.</para>
            <para>
            <img src="../img/google006.png" alt="Create new Client ID for web application"/>
            </para>
            <para>
            For more details, please visit <see href="https://developers.google.com/console/help/new/">Google Developers Console Help</see>.
            </para>
            </remarks>
            <example>
            <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.GoogleClient"/> in <b>Console Applications</b>.</para>
            <para>For desktop applications, the user will need to manually enter authorization code.</para>
            <code lang="C#">
            class Program
            {
              static void Main(string[] args)
              {
                try
                {
                  var google = new GoogleClient
                  (
                    "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com",
                    "AeEbEGQqoKgOZb41JUVLvEJL"
                  );
                  
                  // open the login page in browser
                  System.Diagnostics.Process.Start(google.AuthorizationUrl);
                  
                  // waiting of entering the access code
                  string code = "";
                  while (String.IsNullOrEmpty(code))
                  {
                    Console.WriteLine("Enter access code:");
                    code = Console.ReadLine();
                  }
            
                  Console.WriteLine();
            
                  // set authorization code
                  google.AuthorizationCode = code;
                  // get user info
                  var user = google.GetUserInfo();
                  Console.WriteLine("User ID: {0}", user.UserId);
                  Console.WriteLine("Name:    {0}", user.DisplayName);
                  Console.WriteLine("Email:   {0}", user.Email);
                }
                catch (Exception ex)
                {
                  Console.WriteLine(ex.Message);
                }
                Console.ReadKey();
              }
            }
            </code>
            <code lang="VB">
            Module Module1
            
              Sub Main()
                Try
                  Dim google As New GoogleClient _
                  (
                    "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com",
                    "AeEbEGQqoKgOZb41JUVLvEJL"
                  )
                  ' open the login page in browser
                  System.Diagnostics.Process.Start(google.AuthorizationUrl)
            
                  ' waiting of entering the access code
                  Dim code As String = ""
                  Do While String.IsNullOrEmpty(code)
                    Console.WriteLine("Enter access code:")
                    code = Console.ReadLine()
                  Loop
            
                  ' set authorization code
                  google.AuthorizationCode = code
            
                  ' get user info
                  Dim user As UserInfo = google.GetUserInfo()
                  Console.WriteLine("User ID: {0}", user.UserId)
                  Console.WriteLine("Name:    {0}", user.DisplayName)
                  Console.WriteLine("Email:   {0}", user.Email)
                Catch ex As Exception
                  Console.WriteLine(ex.Message)
                End Try
                Console.ReadKey()
              End Sub
            
            End Module
            </code>
            <para>Result of the program is shown in the images below.</para>
            <para><img src="../img/google007.png" alt="Log in with Google"/></para>
            <para><img src="../img/google008.png" alt="Access code"/></para>
            <para><img src="../img/google009.png" alt="User info"/></para>
            <para>In a web projects you can use the <see cref="T:Nemiro.OAuth.OAuthManager"/> and <see cref="T:Nemiro.OAuth.OAuthWeb"/>.</para>
            <para>The following example shows how use the <see cref="T:Nemiro.OAuth.Clients.GoogleClient"/> in <b>ASP .NET MVC Application</b>.</para>
            <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.GoogleClient"/>.</para>
            <code lang="C#">
            protected void Application_Start()
            {
              OAuthManager.RegisterClient
              (
                new GoogleClient
                (
                  "1058655871432-fscjqht7ou30a75gjkde1eu1brsvbqkn.apps.googleusercontent.com",
                  "SI5bIZkrSB5rO03YF-CdsCJC"
                )
              );
            }
            </code>
            <code lang="VB">
            Sub Application_Start()
              OAuthManager.RegisterClient _
              (
                New GoogleClient _
                (
                  "1058655871432-fscjqht7ou30a75gjkde1eu1brsvbqkn.apps.googleusercontent.com",
                  "SI5bIZkrSB5rO03YF-CdsCJC"
                )
              )
            End Sub
            </code>
            <para>The <c>GoogleLoginResult</c> method will handle authorization result.</para>
            <code lang="C#">
            public ActionResult GoogleLoginResult()
            {
              var result = OAuthWeb.VerifyAuthorization();
              if (result.IsSuccessfully)
              {
                var user = result.UserInfo;    
                // NOTE: For StringBuilder import the System.Text
                StringBuilder r = new StringBuilder();
                r.AppendFormat("User ID: {0}\r\n", user.UserId);
                r.AppendFormat("Name:    {0}\r\n", user.DisplayName);
                r.AppendFormat("Email:   {0}", user.Email);
                return new ContentResult { Content = r.ToString(), ContentType = "text/plain" }; 
              }
              
              return new ContentResult 
              { 
                Content = "Error: " + result.ErrorInfo.Message, 
                ContentType = "text/plain" 
              };
            }
            </code>
            <code lang="VB">
            Public Function GoogleLoginResult() As ActionResult
              Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
              If result.IsSuccessfully Then 
                Dim user As UserInfo = result.UserInfo   
                ' NOTE: For StringBuilder import the System.Text
                Dim r As New StringBuilder()
                r.AppendFormat("User ID: {0}", user.UserId)
                r.AppendLine()
                r.AppendFormat("Name:    {0}", user.DisplayName)
                r.AppendLine()
                r.AppendFormat("Email:   {0}", user.Email)
                Return New ContentResult With { .Content = r.ToString(), .ContentType = "text/plain" } 
              End If
              
              Return New ContentResult With _
              { 
                .Content = "Error: " + result.ErrorInfo.Message, 
                .ContentType = "text/plain" 
              }
            End Function
            </code>
            <para>Add action method for redirection to the <b>Google</b>.</para>
            <code lang="C#">
            public ActionResult GoogleLogin()
            {
              string authUrl = OAuthWeb.GetAuthorizationUrl("Google", Url.Action("GoogleLoginResult", "Home", null, null, Request.Url.Host));
              return Redirect(authUrl);
            }
            </code>
            <code lang="VB">
            Public Function GoogleLogin() As ActionResult
              Dim authUrl As String = OAuthWeb.GetAuthorizationUrl("Google", Url.Action("GoogleLoginResult", "Home", Nothing, Nothing, Request.Url.Host))
              Return Redirect(authUrl)
            End Function
            </code>
            <para>On a page add link to the <c>GoogleLogin</c> method.</para>
            <code lang="html">
            @Html.ActionLink("Log in with Google", "GoogleLogin")
            </code>
            </example>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="T:Nemiro.OAuth.OAuth2Client">
            <summary>
            Represents base properties and method for OAuth 2.0 client.
            </summary>
            <remarks>
            <para>For more details, please visit <see href="http://tools.ietf.org/html/draft-ietf-oauth-v2-31"/>.</para>
            </remarks>
        </member>
        <member name="T:Nemiro.OAuth.OAuthBase">
            <summary>
            Represents base class for OAuth client classes.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthBase.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthBase"/> class.
            </summary>
            <param name="authorizeUrl">The address for login.</param>
            <param name="accessTokenUrl">The address for the access token.</param>
            <param name="applicationId">The application identifier obtained from the provider website.</param>
            <param name="applicationSecret">The application secret key obtained from the provider website.</param>
            <exception cref="T:System.ArgumentNullException">
            <para><paramref name="authorizeUrl"/> is <b>null</b> or <b>empty</b>.</para>
            <para>-or-</para>
            <para><paramref name="accessTokenUrl"/> is <b>null</b> or <b>empty</b>.</para>
            <para>-or-</para>
            <para><paramref name="applicationId"/> is <b>null</b> or <b>empty</b>.</para>
            <para>-or-</para>
            <para><paramref name="applicationSecret"/> is <b>null</b> or <b>empty</b>.</para>
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthBase.RedirectToAuthorization">
            <summary>
            Redirects a client to the Authorization URL.
            </summary>
            <remarks>
            <para>Use this method only for web applications (<b>ASP .NET</b>).</para>
            </remarks>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthBase.GetAccessToken">
            <summary>
            Gets the access token from the remote server.
            </summary>
            <remarks>
            <para>This is method is implemented at the protocol level (<see cref="T:Nemiro.OAuth.OAuthClient"/> &amp; <see cref="T:Nemiro.OAuth.OAuth2Client"/>).</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <see cref="P:Nemiro.OAuth.OAuthBase.AuthorizationCode"/> is <b>null</b> or <b>empty</b>.</exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthBase.GetUserInfo">
            <summary>
            Gets the user details via API of the provider.
            </summary>
            <remarks>
            <para>This is method is implemented at the <see cref="N:Nemiro.OAuth.Clients">client</see> level.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthBase.Clone(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Creates a shallow copy of the current object.
            </summary>
            <param name="parameters">The query parameters for new copy object.</param>
            <param name="returnUrl">The new return URL for new copy object.</param>
            <returns>A shallow copy of the current object.</returns>
            <remarks>
            <para>Method creates a copy of the current object, removes tokens, change the return address, query parameters and state.</para>
            <para>Unfortunately, I made a mistake in architecture, so I had to make this method.</para>
            </remarks>
            <seealso cref="M:Nemiro.OAuth.OAuthBase.Clone"/>
        </member>
        <member name="M:Nemiro.OAuth.OAuthBase.Clone">
            <summary>
            Creates a shallow copy of the current object.
            </summary>
            <returns>A shallow copy of the current object.</returns>
            <remarks>
            <para>Method creates a copy of the current object, removes tokens, change the return address, query parameters and state.</para>
            <para>Unfortunately, I made a mistake in architecture, so I had to make this method.</para>
            </remarks>
            <seealso cref="M:Nemiro.OAuth.OAuthBase.Clone(System.Collections.Specialized.NameValueCollection,System.String)"/>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.ProviderName">
            <summary>
            Unique provider name.
            </summary>
            <remarks>
            <para>Client classes are required to implement this property.</para>
            <para><b>The provider name must be unique.</b></para>
            </remarks>
            <example>
            <code lang="C#">
            public override string ProviderName
            {
              get
              {
                return "KGB";
              }
            }
            </code>
            </example>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.AuthorizationUrl">
            <summary>
            Gets the endpoint of the authorization.
            </summary>
            <remarks>
            <para>This property is implemented at the protocol level (<see cref="T:Nemiro.OAuth.OAuthClient"/> &amp; <see cref="T:Nemiro.OAuth.OAuth2Client"/>).</para>
            </remarks>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.AuthorizationCode">
            <summary>
            Gets or sets access code for access token requests.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.State">
            <summary>
            Gets or sets unique request identifier.
            For clients the value sets is automatically.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.ApplicationId">
            <summary>
            Gets or sets the application identifier.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.ApplicationSecret">
            <summary>
            Gets or sets the application secret key.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.AuthorizeUrl">
            <summary>
            Gets or sets the base address for login.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.AccessTokenUrl">
            <summary>
            Gets or sets the address for the access token.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.Version">
            <summary>
            Gets the version of the OAuth protocol.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.ReturnUrl">
            <summary>
            Gets or sets return URL.
            </summary>
            <remarks>
            <para>At this address provider will return the user authorization results.</para>
            <para>For many providers are needed configuration of the application on the provider website.</para>
            </remarks>
        </member>
        <member name="P:Nemiro.OAuth.OAuthBase.Parameters">
            <summary>
            Gets or sets additional query parameters.
            </summary>
            <remarks>
            <para>These parameters will be transferred to the provider.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuth2Client.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuth2Client"/> class.
            </summary>
            <param name="authorizeUrl">The address for login.</param>
            <param name="accessTokenUrl">The address for the access token.</param>
            <param name="clientId">The application identifier.</param>
            <param name="clientSecret">The application secret key.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuth2Client.GetAccessToken">
            <summary>
            Gets the access token from the remote server.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuth2Client.Scope">
            <summary>
            The scope of the access request.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuth2Client.AuthorizationUrl">
            <summary>
            Gets the endpoint of the authorization.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.Clients.GoogleClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.GoogleClient"/>.
            </summary>
            <param name="clientId">The Client ID obtained from the <see href="https://console.developers.google.com/">Google Developers Console</see>.</param>
            <param name="clientSecret">The Client Secret obtained from the <see href="https://console.developers.google.com/">Google Developers Console</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.GoogleClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.GoogleClient.ProviderName">
            <summary>
            Unique provider name: <b>Google</b>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.GoogleClient.ReturnUrl">
            <summary>
            Return URL.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.AmazonClient">
            <summary>
            OAuth client for <b>Amazon</b>.
            </summary>
            <remarks>
            <h1>Register and Configure Amazon Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>
            You need to register as developer in the <b><see href="http://login.amazon.com/manageApps">App Console</see></b>.
            </para>
            <para>
            <img src="../img/amazon001.png" alt="Sign in to the App Console"/>
            </para>
            <para>
            In the <b>App Console </b> <see href="https://sellercentral.amazon.com/hz/iba/app/new">register new application</see>.
            </para>
            <para>
            <img src="../img/amazon002.png" alt="Register new application"/>
            </para>
            <para>
            Specify one or more return URLs. Access to any other address will be denied.
            </para>
            <para>
            <b>NOTE: Amazon supports only addresses over HTTP<font color="red">S</font> (excluding localhost).</b>
            </para>
            <para>
            For example:
            <list type="bullet">
            <item><description>https://hamster.example.org/Home/ExternalLoginResult</description></item>
            <item><description>http://localhost:59962/Home/ExternalLoginResult</description></item>
            <item><description>http://localhost/</description></item>
            </list>
            </para>
            <para>
            <img src="../img/amazon003.png" alt="Allowed Return URLs"/>
            </para>
            <para>Do not forget to save your changes.</para>
            <para>Use application <b>Client ID</b> and <b>Client Secret</b> when creating an instance of the <see cref="T:Nemiro.OAuth.Clients.AmazonClient"/> class.</para>
            <para>
            <img src="../img/amazon004.png" alt="Allowed Return URLs"/>
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new AmazonClient
              (
                "amzn1.application-oa2-client.f0ffe4edc256488dae00dcaf96d75d1b", 
                "764dcefe49b441c8c6244c93e5d5d04de54fda6dfdc83da9693bf346f4dc4515"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New AmazonClient _
              (
                "amzn1.application-oa2-client.f0ffe4edc256488dae00dcaf96d75d1b", 
                "764dcefe49b441c8c6244c93e5d5d04de54fda6dfdc83da9693bf346f4dc4515"
              )
            )
            </code>
            <para>
            For more details, please see <see href="http://login.amazon.com/documentation">Amazon Developer Documentation</see>.
            </para>
            </remarks>
            <example>
            <para>The following example shows how to add the <b>Amazon OAuth Client</b> to <b>ASP .NET MVC Application</b>.</para>
            <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.AmazonClient"/>.</para>
            <code lang="C#">
            protected void Application_Start()
            {
              OAuthManager.RegisterClient
              (
                new AmazonClient
                (
                  "amzn1.application-oa2-client.f0ffe4edc256488dae00dcaf96d75d1b", 
                  "764dcefe49b441c8c6244c93e5d5d04de54fda6dfdc83da9693bf346f4dc4515"
                )
              );
            }
            </code>
            <code lang="VB">
            Sub Application_Start()
              OAuthManager.RegisterClient _
              (
                New AmazonClient _
                (
                  "amzn1.application-oa2-client.f0ffe4edc256488dae00dcaf96d75d1b", 
                  "764dcefe49b441c8c6244c93e5d5d04de54fda6dfdc83da9693bf346f4dc4515"
                )
              )
            End Sub
            </code>
            <para>The <c>ExternalLoginResult</c> method will handle authorization result.</para>
            <code lang="C#">
            public ActionResult ExternalLoginResult()
            {
              var result = OAuthWeb.VerifyAuthorization();
              if (result.IsSuccessfully)
              {
                var user = result.UserInfo;    
                // NOTE: For StringBuilder import the System.Text
                StringBuilder r = new StringBuilder();
                r.AppendFormat("User ID: {0}\r\n", user.UserId);
                r.AppendFormat("Name:    {0}\r\n", user.DisplayName);
                r.AppendFormat("Email:   {0}", user.Email);
                return new ContentResult { Content = r.ToString(), ContentType = "text/plain" }; 
              }
              
              return new ContentResult 
              { 
                Content = "Error: " + result.ErrorInfo.Message, 
                ContentType = "text/plain" 
              };
            }
            </code>
            <code lang="VB">
            Public Function ExternalLoginResult() As ActionResult
              Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
              If result.IsSuccessfully Then 
                Dim user As UserInfo = result.UserInfo   
                ' NOTE: For StringBuilder import the System.Text
                Dim r As New StringBuilder()
                r.AppendFormat("User ID: {0}", user.UserId)
                r.AppendLine()
                r.AppendFormat("Name:    {0}", user.DisplayName)
                r.AppendLine()
                r.AppendFormat("Email:   {0}", user.Email)
                Return New ContentResult With { .Content = r.ToString(), .ContentType = "text/plain" } 
              End If
              
              Return New ContentResult With _
              { 
                .Content = "Error: " + result.ErrorInfo.Message, 
                .ContentType = "text/plain" 
              }
            End Function
            </code>
            <para>Now you can easily redirect user to login page.</para>
            <code lang="C#">
            // NOTE: use httpS scheme for real websites
            string authUrl = OAuthWeb.GetAuthorizationUrl("Amazon", Url.Action("ExternalLoginResult", "Home", null, null, Request.Url.Host));
            // for example, MVC redirection from Action:
            // return Redirect(authUrl);
            </code>
            <code lang="VB">
            ' NOTE: use httpS scheme for real websites
            Dim authUrl As String = OAuthWeb.GetAuthorizationUrl("Amazon", Url.Action("ExternalLoginResult", "Home", Nothing, Nothing, Request.Url.Host))
            ' for example, MVC redirection from Action
            ' Return Redirect(authUrl)
            </code>
            <para>Result shown in the images below.</para>
            <para><img src="../img/amazon005.png" alt="Amazon Sign in"/></para>
            <para><img src="../img/amazon006.png" alt="Amazon User Info"/></para>
            </example>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.AmazonClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.AmazonClient"/> class.
            </summary>
            <param name="clientId">The client ID obtained from the <see href="http://login.amazon.com/manageApps">App Console</see>.</param>
            <param name="clientSecret">The client secret obtained from the <see href="http://login.amazon.com/manageApps">App Console</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.AmazonClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.AmazonClient.ProviderName">
            <summary>
            Unique provider name: <b>Amazon</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.LiveClient">
            <summary>
            OAuth client for <b>Microsoft Live</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a Live Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://account.live.com/developers/applications/index">Live Connect App Management</see></b> and <b>Create a New Application</b>.</para>
            <para>
            <img src="../img/live001.png" alt="Create a New Application"/>
            </para>
            <para>Specify the application name, read terms of use and click the <b>I accept</b>.</para>
            <para>
            <img src="../img/live002.png" alt="Create a New Application form"/>
            </para>
            <para>Open the <b>App Settings</b> and add return URLs. You can't use localhost.</para>
            <para>
            <img src="../img/live003.png" alt="Redirect URLs"/>
            </para>
            <para>On the <b>App Settings</b> page, you can found <b>Client ID</b> and <b>Client Secret</b>.</para>
            <para>
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.LiveClient"/>.
            </para>
            <para>
            <img src="../img/live004.png" alt="Cleint ID and Client Secret"/>
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new LiveClient
              (
                "0000000040124265", 
                "6ViSGIbw9N59s5Ndsfz-zaeezlBt62Ep"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New LiveClient _
              (
                "0000000040124265", 
                "6ViSGIbw9N59s5Ndsfz-zaeezlBt62Ep"
              )
            )
            </code>
            <para>
            For more details, please visit to the <see href="http://msdn.microsoft.com/en-us/library/hh826541.aspx">MSDN</see>.
            </para>
            </remarks>
            <example>
            <para>The following example shows how to add the <b>Microsoft Live OAuth Client</b> to <b>ASP .NET MVC Application</b>.</para>
            <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.LiveClient"/>.</para>
            <code lang="C#">
            protected void Application_Start()
            {
              OAuthManager.RegisterClient
              (
                new LiveClient
                (
                  "0000000040124265", 
                  "6ViSGIbw9N59s5Ndsfz-zaeezlBt62Ep"
                )
              );
            }
            </code>
            <code lang="VB">
            Sub Application_Start()
              OAuthManager.RegisterClient _
              (
                New LiveClient _
                (
                  "0000000040124265", 
                  "6ViSGIbw9N59s5Ndsfz-zaeezlBt62Ep"
                )
              )
            End Sub
            </code>
            <para>The <c>LiveLoginResult</c> method will handle authorization result.</para>
            <code lang="C#">
            public ActionResult LiveLoginResult()
            {
              var result = OAuthWeb.VerifyAuthorization();
              if (result.IsSuccessfully)
              {
                var user = result.UserInfo;    
                // NOTE: For StringBuilder import the System.Text
                StringBuilder r = new StringBuilder();
                r.AppendFormat("User ID: {0}\r\n", user.UserId);
                r.AppendFormat("Name:    {0}\r\n", user.DisplayName);
                r.AppendFormat("Email:   {0}", user.Email);
                return new ContentResult { Content = r.ToString(), ContentType = "text/plain" }; 
              }
              
              return new ContentResult 
              { 
                Content = "Error: " + result.ErrorInfo.Message, 
                ContentType = "text/plain" 
              };
            }
            </code>
            <code lang="VB">
            Public Function LiveLoginResult() As ActionResult
              Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
              If result.IsSuccessfully Then 
                Dim user As UserInfo = result.UserInfo   
                ' NOTE: For StringBuilder import the System.Text
                Dim r As New StringBuilder()
                r.AppendFormat("User ID: {0}", user.UserId)
                r.AppendLine()
                r.AppendFormat("Name:    {0}", user.DisplayName)
                r.AppendLine()
                r.AppendFormat("Email:   {0}", user.Email)
                Return New ContentResult With { .Content = r.ToString(), .ContentType = "text/plain" } 
              End If
              
              Return New ContentResult With _
              { 
                .Content = "Error: " + result.ErrorInfo.Message, 
                .ContentType = "text/plain" 
              }
            End Function
            </code>
            <para>Add action method for redirection to the <b>Microsoft Live</b>.</para>
            <code lang="C#">
            public ActionResult LiveLogin()
            {
              string authUrl = OAuthWeb.GetAuthorizationUrl("Live", Url.Action("LiveLoginResult", "Home", null, null, Request.Url.Host));
              return Redirect(authUrl);
            }
            </code>
            <code lang="VB">
            Public Function LiveLogin() As ActionResult
              Dim authUrl As String = OAuthWeb.GetAuthorizationUrl("Live", Url.Action("LiveLoginResult", "Home", Nothing, Nothing, Request.Url.Host))
              Return Redirect(authUrl)
            End Function
            </code>
            <para>On a page add link to the <c>LiveLogin</c> method.</para>
            <code lang="html">
            @Html.ActionLink("Log in with Microsoft Live", "LiveLogin")
            </code>
            <para>Result shown in the images below.</para>
            <para><img src="../img/live005.png" alt="Microsoft Live Sign in"/></para>
            <para><img src="../img/live006.png" alt="User Info"/></para>
            </example>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.LiveClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.LiveClient"/>.
            </summary>
            <param name="clientId">The Client ID obtained from the <see href="https://account.live.com/developers/applications/index">Live Connect App Management</see>.</param>
            <param name="clientSecret">The Client Secret obtained from the <see href="https://account.live.com/developers/applications/index">Live Connect App Management</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.LiveClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.LiveClient.ProviderName">
            <summary>
            Unique provider name: <b>Live</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.GitHubClient">
            <summary>
            OAuth client for <b>GitHub</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a GitHub Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>
            </para>
            <para><b><see href="https://github.com/settings/applications/new">Register a new OAuth application</see></b>.</para>
            <para>
            In the application settings  you can found <b>Client ID</b> and <b>Client Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.GitHubClient"/> class.
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new GitHubClient
              (
                "e14122695d88f5c95bce", 
                "cde23ec001c5180e01e865f4efb57cb0bc848c16"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New GitHubClient _
              (
                "e14122695d88f5c95bce", 
                "cde23ec001c5180e01e865f4efb57cb0bc848c16"
              )
            )
            </code>
            <para>
            For more details, please see <see href="https://developer.github.com/guides/">GitHub Development Guides</see>.
            </para>
            </remarks>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.GitHubClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.GitHubClient"/>.
            </summary>
            <param name="clientId">The Client ID obtained from the <see href="https://github.com/settings/applications">GitHub Applications</see>.</param>
            <param name="clientSecret">The Client Secret obtained from the <see href="https://github.com/settings/applications">GitHub Applications</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.GitHubClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <remarks>
            <para>
            For more details, please see <see href="https://developers.facebook.com/docs/graph-api/reference/v2.0/user">User</see> method in <b>Guide of Facebook Graph API</b>.
            </para>
            </remarks>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.GitHubClient.ProviderName">
            <summary>
            Unique provider name: <b>GitHub</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.DropboxClient">
            <summary>
            OAuth client for <b>Dropbox</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a Dropbox Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://www.dropbox.com/developers/apps">Dropbox App Console</see></b> and <b>Create app</b>.</para>
            <para>Choose the <b>Dropbox API app</b> type.</para>
            <para>
            In the application settings  you can found <b>App key</b> and <b>App secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.DropboxClient"/> class.
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new DropboxClient
              (
                "0le6wsyp3y085wy", 
                "48afwq9yth83y7u"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New DropboxClient _
              (
                "0le6wsyp3y085wy", 
                "48afwq9yth83y7u"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="https://www.dropbox.com/developers">Dropbox Platform Help</see>.
            </para>
            </remarks>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.DropboxClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.DropboxClient"/>.
            </summary>
            <param name="clientId">The <b>App key</b> obtained from the <see href="https://www.dropbox.com/developers/apps">Dropbox App Console</see>.</param>
            <param name="clientSecret">The <b>App secret</b> obtained from the <see href="https://www.dropbox.com/developers/apps">Dropbox App Console</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.DropboxClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.DropboxClient.ProviderName">
            <summary>
            Unique provider name: <b>Dropbox</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.FoursquareClient">
            <summary>
            OAuth client for <b>Foursquare</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a Foursquare Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://foursquare.com/oauth">Foursquare App</see></b> and <b>Create app</b>.</para>
            <para>
            In the application settings  you can found <b>Client ID</b> and <b>Client Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.FoursquareClient"/> class.
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new FoursquareClient
              (
                "LHYZN1KUXN50L141QCQFNNVOYBGUE3G3FCWFZ3EEZTOZHY5Q", 
                "HWXYFLLSS2IUQ0H4XNCDAZEFZKIU3MZRP5G55TNBDHRPNOQT"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New FoursquareClient _
              (
                "LHYZN1KUXN50L141QCQFNNVOYBGUE3G3FCWFZ3EEZTOZHY5Q", 
                "HWXYFLLSS2IUQ0H4XNCDAZEFZKIU3MZRP5G55TNBDHRPNOQT"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="https://developer.foursquare.com/">Foursquare for Developers</see>.
            </para>
            </remarks>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.FoursquareClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>.
            </summary>
            <param name="clientId">The <b>Client ID</b> obtained from the <see href="https://foursquare.com/oauth">Foursquare Apps</see>.</param>
            <param name="clientSecret">The <b>Client Secret</b> obtained from the <see href="https://foursquare.com/oauth">Foursquare Apps</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.FoursquareClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.FoursquareClient.ProviderName">
            <summary>
            Unique provider name: <b>Foursquare</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.SoundCloudClient">
            <summary>
            OAuth client for <b>SoundCloud</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a SoundCloud Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://developers.soundcloud.com/">SoundCloud for Developers</see></b> and <b><see href="http://soundcloud.com/you/apps/new">Register a new app</see></b>.</para>
            <para>
            In the application settings  you can found <b>Client ID</b> and <b>Client Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/> class.
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new SoundCloudClient
              (
                "42b58d31e399664a3fb8503bfcaaa9ba", 
                "f9d85648da59fb95ec131b40c7645c31"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New SoundCloudClient _
              (
                "42b58d31e399664a3fb8503bfcaaa9ba", 
                "f9d85648da59fb95ec131b40c7645c31"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="https://developers.soundcloud.com/">SoundCloud for Developers</see>.
            </para>
            </remarks>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.SoundCloudClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>.
            </summary>
            <param name="clientId">The <b>Client ID</b> obtained from the <see href="http://soundcloud.com/you/apps">SoundCloud Applications</see>.</param>
            <param name="clientSecret">The <b>Client Secret</b> obtained from the <see href="http://soundcloud.com/you/apps">SoundCloud Applications</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.SoundCloudClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.SoundCloudClient.ProviderName">
            <summary>
            Unique provider name: <b>SoundCloud</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.YahooClient">
            <summary>
            OAuth client for <b>Yahoo</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a Yahoo Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Consumer ID</b> and <b>Consumer Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open <b><see href="https://developer.yahoo.com/">Yahoo Developer Network</see></b> and <b><see href="https://developer.apps.yahoo.com/dashboard/createKey.html">Create a Project</see></b>.</para>
            <para>
            In the application settings  you can found <b>Consumer Key</b> and <b>Consumer Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.YahooClient"/> class.
            </para>
            <para>Note that <b>Yahoo!</b> does not work with the localhost. Use only a real servers. Make sure that your application on the Yahoo! dashboard configured correctly.</para>
            <para><b>Yahoo!</b> has a pretty flimsy OAuth interface. If something is done or configured incorrectly, the work will be nothing. But in general, the client is tested and works.</para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new YahooClient
              (
                "dj0yJmk9Qm1vZ3p2TmtQUm4zJmQ9WVdrOU4wbGlkWGxJTkc4bWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD0xZQ--", 
                "a55738627652db0acfe464de2d9be13963b0ba1f"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New YahooClient _
              (
                "dj0yJmk9Qm1vZ3p2TmtQUm4zJmQ9WVdrOU4wbGlkWGxJTkc4bWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD0xZQ--", 
                "a55738627652db0acfe464de2d9be13963b0ba1f"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="https://developer.yahoo.com/">Yahoo Developer Network</see>.
            </para>
            </remarks>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.YahooClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.YahooClient"/>.
            </summary>
            <param name="clientId">The <b>Consumer Key</b> obtained from the <see href="https://developer.apps.yahoo.com/projects">Yahoo Developer Dashboard</see>.</param>
            <param name="clientSecret">The <b>Consumer Secret</b> obtained from the <see href="https://developer.apps.yahoo.com/projects">Yahoo Developer Dashboard</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.YahooClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.Clients.YahooClient.GetAccessToken">
            <summary>
            Gets the access token from the remote server.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.YahooClient.ProviderName">
            <summary>
            Unique provider name: <b>Yahoo</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.LinkedInClient">
            <summary>
            OAuth client for <b>LinkedIn</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a LinkedIn Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open and sigin to the <b><see href="https://developer.linkedin.com/">LinkedIn for Developers</see></b>, and <b><see href="https://www.linkedin.com/secure/developer?newapp=">Add new app</see></b>.</para>
            <para>
            In the application settings  you can found <b>Api Key</b> and <b>Secret Key</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.LinkedInClient"/> class.
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new LinkedInClient
              (
                "75vufylz829iim", 
                "VOf14z4T1jie4ezS"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New LinkedInClient _
              (
                "75vufylz829iim", 
                "VOf14z4T1jie4ezS"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="https://developer.linkedin.com/">LinkedIn for Developers</see>.
            </para>
            </remarks>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.LinkedInClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>.
            </summary>
            <param name="clientId">The <b>Api Key</b> obtained from the <see href="https://www.linkedin.com/secure/developer">LinkedIn Dashboard</see>.</param>
            <param name="clientSecret">The <b>Secret Key</b> obtained from the <see href="https://www.linkedin.com/secure/developer">LinkedIn Dashboard</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.LinkedInClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.LinkedInClient.ProviderName">
            <summary>
            Unique provider name: <b>LinkedIn</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.ApiException">
            <summary>
            The exception that is thrown when server of API returns error.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.RequestException">
            <summary>
            The exception that is thrown when an error occurs while accessing the network.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.RequestException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.RequestException"/> class with a specified server request result, content type and the exception that is the cause of this exception.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="contentType">The content type of the server request result.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Nemiro.OAuth.RequestException.RequestResult">
            <summary>
            Instance of the <see cref="P:Nemiro.OAuth.RequestException.RequestResult"/>.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.ApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiException"/> class with a specified error message and the exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiException.#ctor(Nemiro.OAuth.RequestResult,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiException"/> class with a specified <see cref="T:Nemiro.OAuth.RequestResult"/> and the exception that is the cause of this exception.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiException.#ctor(Nemiro.OAuth.RequestResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiException"/> class with a specified <see cref="T:Nemiro.OAuth.RequestResult"/> and error message.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiException"/> class with a specified server request result, content type and the exception that is the cause of this exception.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <c>null</c> reference (<c>Nothing</c> in Visual Basic) if no inner exception is specified.</param>
            <param name="contentType">The content type of the server request result.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiException"/> class with a specified server request result, content type and a error message.
            </summary>
            <param name="result">The result of the request.</param>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="contentType">The content type of the server request result.</param>
        </member>
        <member name="T:Nemiro.OAuth.Clients.FacebookClient">
             <summary>
             OAuth client for <b>Facebook</b>.
             </summary>
             <remarks>
             <h1>Register and Configure a Facebook Application</h1>
             <list type="table">
             <item>
             <term><img src="../img/warning.png" alt="(!)" title=""/></term>
             <term>
             <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
             If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
             If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
             </term>
             </item>
             </list>
             <para>
             You need to <b><see href="https://developers.facebook.com">register as developer</see></b>.
             </para>
             <para>Open the <b><see href="https://developers.facebook.com">Facebook Developers</see></b> and <b>Create a New App</b>.</para>
             <para>
             <img src="../img/facebook001.png" alt="Create new application menu"/>
             </para>
             <para>Specify the application name and click the <b>Create App</b>.</para>
             <para>
             <img src="../img/facebook002.png" alt="Create new application form"/>
             </para>
             <para>
             In the application dashboard you can found <b>App ID</b> and <b>App Secret</b>, this is <b>Client ID</b> and <b>Client Secret</b>.
             Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.FacebookClient"/> class.
             </para>
             <para>
             <img src="../img/facebook003.png" alt="App ID and App Secret"/>
             </para>
             <code lang="C#">
             OAuthManager.RegisterClient
             (
               new FacebookClient
               (
                 "1435890426686808", 
                 "c6057dfae399beee9e8dc46a4182e8fd"
               )
             );
             </code>
             <code lang="VB">
             OAuthManager.RegisterClient _
             (
               New FacebookClient _
               (
                 "1435890426686808", 
                 "c6057dfae399beee9e8dc46a4182e8fd"
               )
             )
             </code>
             <para>You can use the <b>App ID</b> and <b>App Secret</b> for desktop, mobile and web projects.</para>
             <h2>The application availability</h2>
             <para>
             To manage the status of the application, you must provide contact information.
             </para>
             <para>
             Enter a contact email on the <b>Settings</b> page.
             </para>
             <para>
             <img src="../img/facebook004.png" alt="Contact Email"/>
             </para>
             <para>
             And now, you can change availability status of the application on the <b>Status &amp; Review</b> page.
             </para>
             <para>
             <img src="../img/facebook005.png" alt="Make App Public"/>
             </para>
             <h2>Configure application for web projects</h2>
             <para>For web projects, configure <b>return URLs</b>.</para>
             <para>
             Open the application <b>Settings</b> and click <b>Advanced</b> tab.
             </para>
             <para>
             <img src="../img/facebook006.png" alt="Advanced tab"/>
             </para>
             <para>
             You must add the return URLs to the <b>Valid OAuth redirect URIs</b> field of the <b>Security</b> section.
             </para>
             <para>Do not forget to save your changes.</para>
             <para><b>NOTE:</b> If the application will be used for web and desktop, then also add URL: <c>https://www.facebook.com/connect/login_success.html</c>.</para>
             <para><b>NOTE:</b> Enable <b>Client OAuth Login</b> if it's disabled.</para>
             <para>
             <img src="../img/facebook007.png" alt="Valid OAuth redirect URIs"/>
             </para>
             <para>
             For more details, please see <see href="https://developers.facebook.com/docs/">Facebook Developer Documentation</see>.
             </para>
             </remarks>
             <example>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.FacebookClient"/> in desktop applications.</para>
             <para>To test the example, create a new <b>Windows Forms</b> project with two forms. Insert a <c>Button</c> to the <c>Form1</c>.</para>
             <code lang="C#">
             public Form1()
             {
               InitializeComponent();
               button1.Click += new EventHandler(button1_Click);
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
               // facebook client registration
               OAuthManager.RegisterClient
               (
                 new FacebookClient
                 (
                   // app id
                   "1435890426686808", 
                   // app secret
                   "c6057dfae399beee9e8dc46a4182e8fd"
                 ) 
                 { 
                   // display=popup - to open a popup window
                   Parameters = new NameValueCollection { { "display", "popup" } } 
                 }
               );
             }
             
             private void button1_Click(object sender, EventArgs e)
             {
               var frm = new Form2();
               frm.ShowDialog();
             }
             </code>
             <code lang="VB">
             Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               ' facebook client registration
               OAuthManager.RegisterClient _
               (
                 New FacebookClient _
                 (
                   "1435890426686808",
                   "c6057dfae399beee9e8dc46a4182e8fd"
                 ) With _
                 {
                   .Parameters = New NameValueCollection() From {{"display", "popup"}}
                 }
               )
             End Sub
             
             Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
               Call New Form2().ShowDialog()
             End Sub
             </code>
             <para>Insert a <c>WebBrowser</c> to the <c>Form2</c>.</para>
             <code lang="C#">
             public Form2()
             {
               InitializeComponent();
               webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);
               webBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("facebook"));
             }
             
             private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
             {
               // waiting for results
               if (e.Url.Query.IndexOf("code=") != -1 || e.Url.Fragment.IndexOf("code=") != -1 || e.Url.Query.IndexOf("oauth_verifier=") != -1)
               {
                 // is the result, verify
                 var result = OAuthWeb.VerifyAuthorization(e.Url.ToString());
                 if (result.IsSuccessfully)
                 {
                   // show user info
                   MessageBox.Show
                   (
                     String.Format
                     (
                       "User ID: {0}\r\nUsername: {1}\r\nDisplay Name: {2}\r\nE-Mail: {3}", 
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       result.UserInfo.DisplayName ?? result.UserInfo.FullName,
                       result.UserInfo.Email
                     ), 
                     "Successfully", 
                     MessageBoxButtons.OK, 
                     MessageBoxIcon.Information
                   );
                 }
                 else
                 {
                   // show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 }
                 this.Close();
               }
             }
             </code>
             <code lang="VB">
             Private Sub Form2_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               WebBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("facebook"))
             End Sub
            
             Private Sub WebBrowser1_DocumentCompleted(sender As System.Object, e As System.Windows.Forms.WebBrowserDocumentCompletedEventArgs) Handles WebBrowser1.DocumentCompleted
               ' waiting for results
               If Not e.Url.Query.IndexOf("code=") = -1 OrElse Not e.Url.Fragment.IndexOf("code=") = -1 OrElse Not e.Url.Query.IndexOf("oauth_verifier=") = -1 Then
                 ' is the result, verify
                 Dim result = OAuthWeb.VerifyAuthorization(e.Url.ToString())
                 If result.IsSuccessfully Then
                   ' show user info
                   MessageBox.Show _
                   (
                     String.Format _
                     (
                       "User ID: {0}{4}Username: {1}{4}Display Name: {2}{4}E-Mail: {3}",
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       If(Not String.IsNullOrEmpty(result.UserInfo.DisplayName), result.UserInfo.DisplayName, result.UserInfo.FullName),
                       result.UserInfo.Email,
                       vbNewLine
                     ),
                     "Successfully",
                     MessageBoxButtons.OK,
                     MessageBoxIcon.Information
                   )
                 Else
                   ' show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                 End If
                 Me.Close()
               End If
             End Sub
             </code>
             <para>Result of the program is shown in the images below.</para>
             <para><img src="../img/facebook008.png" alt="Log in with Facebook"/></para>
             <para><img src="../img/facebook009.png" alt="Facebook User Info"/></para>
             </example>
             <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.FacebookClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.FacebookClient"/>.
            </summary>
            <param name="clientId">The App ID obtained from the <see href="https://developers.facebook.com/apps/">Facebook Developers</see>.</param>
            <param name="clientSecret">The App Secret obtained from the <see href="https://developers.facebook.com/apps/">Facebook Developers</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.FacebookClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <remarks>
            <para>
            For more details, please see <see href="https://developers.facebook.com/docs/graph-api/reference/v2.0/user">User</see> method in <b>Guide of Facebook Graph API</b>.
            </para>
            </remarks>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
        </member>
        <member name="P:Nemiro.OAuth.Clients.FacebookClient.ProviderName">
            <summary>
            Unique provider name: <b>Facebook</b>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.FacebookClient.ReturnUrl">
            <summary>
            Return URL.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.OdnoklassnikiClient">
             <summary>
             OAuth client for <b>Odnoklassniki</b>.
             </summary>
             <remarks>
             <para><b>Odnoklassniki</b> is a social network service for classmates and old friends. It is popular in Russia and CIS.</para>
             <h1>Register and Configure a Odnoklassniki Site</h1>
             <list type="table">
             <item>
             <term><img src="../img/warning.png" alt="(!)" title=""/></term>
             <term>
             <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
             If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
             If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
             </term>
             </item>
             </list>
             <para>Open <b>My Games</b> page and click <b>My Uploaded Games</b>.</para>
             <para>
             <img src="../img/ok001.png" alt="My Games in the footer menu" width="650"/>
             </para>
             <para>
             <img src="../img/ok002.png" alt="My Uploaded Games" width="650"/>
             </para>
             <para>Click <b>Add App</b>.</para>
             <para>
             <img src="../img/ok003.png" alt="Add App button" width="650"/>
             </para>
             <para>Enter the Title, Shortname, Description, Image link and App link. Select Application type (<b>External</b> type) and Permission.</para>
             <list type="table">
             <item>
             <term><img src="../img/warning.png" alt="(!)" title=""/></term>
             <term>
             <b>It is important to provide a link to the application (App link).</b><br/>
             You must use this link as the return URL. Even for desktop applications.<br/>
             You can use <b>localhost</b> for desktop applications.<br/>
             <b>It is important to specify the type of application: External.</b>
             </term>
             </item>
             </list>
             <para>
             <img src="../img/ok004.png" alt="App form" width="650"/>
             </para>
             <para>In your email box you will find email message with the <b>Client ID</b>, <b>Client Secret</b> and <b>Public key</b>.</para>
             <para>
             <img src="../img/ok005.png" alt="Email message" width="650"/>
             </para>
             <para>
             Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>.
             </para>
             <code lang="C#">
             OAuthManager.RegisterClient
             (
               new OdnoklassnikiClient
               (
                 "1094959360", 
                 "E45991423E8C5AE249B44E84",
                 "CBACMEECEBABABABA"
               )
             );
             </code>
             <code lang="VB">
             OAuthManager.RegisterClient _
             (
               New OdnoklassnikiClient _
               (
                 "1094959360", 
                 "E45991423E8C5AE249B44E84",
                 "CBACMEECEBABABABA"
               )
             )
             </code>
             <list type="table">
             <item>
             <term><img src="../img/warning.png" alt="(!)" title=""/></term>
             <term>
             <b>Odnoklassniki does not support the "state". For this to work, you must always specify a return URL.</b>
             </term>
             </item>
             </list>
             <para>
             For more details, please visit to the <see href="http://apiok.ru/wiki/pages/viewpage.action?pageId=42476300">Odnoklassniki API Documentation</see>.
             </para>
             </remarks>
             <example>
             <h2>Windows Forms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/> in desktop applications.</para>
             <para>To test the example, create a new <b>Windows Forms</b> project with two forms. Add a <c>Button</c> to the <c>Form1</c>.</para>
             <code lang="C#">
             public Form1()
             {
               InitializeComponent();
               button1.Click += new EventHandler(button1_Click);
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
               // odnoklassniki client registration
               OAuthManager.RegisterClient
               (
                 new OdnoklassnikiClient
                 (
                   // application ID
                   "1094959360", 
                   // sectet key
                   "E45991423E8C5AE249B44E84",
                   // public key
                   "CBACMEECEBABABABA"
                 ) { ReturnUrl = "http://localhost" } // return url - it's important
               );
             }
             
             private void button1_Click(object sender, EventArgs e)
             {
               var frm = new Form2();
               frm.ShowDialog();
             }
             </code>
             <code lang="VB">
             Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               ' odnoklassniki client registration
               OAuthManager.RegisterClient _
               (
                 New OdnoklassnikiClient _
                 (
                   "1094959360", 
                   "E45991423E8C5AE249B44E84",
                   "CBACMEECEBABABABA"
                 ) With { .ReturnUrl = "http://localhost" }
               )
             End Sub
             
             Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
               Call New Form2().ShowDialog()
             End Sub
             </code>
             <para>Add a <c>WebBrowser</c> to the <c>Form2</c>.</para>
             <code lang="C#">
             public Form2()
             {
               InitializeComponent();
               webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);
               webBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("Odnoklassniki"));
             }
             
             private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
             {
               // waiting for results
               if (e.Url.Query.IndexOf("code=") != -1 || e.Url.Fragment.IndexOf("code=") != -1 || e.Url.Query.IndexOf("oauth_verifier=") != -1)
               {
                 // is the result, verify
                 var result = OAuthWeb.VerifyAuthorization(e.Url.ToString());
                 if (result.IsSuccessfully)
                 {
                   // show user info
                   MessageBox.Show
                   (
                     String.Format
                     (
                       "User ID: {0}\r\nUsername: {1}\r\nDisplay Name: {2}\r\nE-Mail: {3}", 
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       result.UserInfo.DisplayName ?? result.UserInfo.FullName,
                       result.UserInfo.Email
                     ), 
                     "Successfully", 
                     MessageBoxButtons.OK, 
                     MessageBoxIcon.Information
                   );
                 }
                 else
                 {
                   // show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 }
                 this.Close();
               }
             }
             </code>
             <code lang="VB">
             Private Sub Form2_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               WebBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("Odnoklassniki"))
             End Sub
            
             Private Sub WebBrowser1_DocumentCompleted(sender As System.Object, e As System.Windows.Forms.WebBrowserDocumentCompletedEventArgs) Handles WebBrowser1.DocumentCompleted
               ' waiting for results
               If Not e.Url.Query.IndexOf("code=") = -1 OrElse Not e.Url.Fragment.IndexOf("code=") = -1 OrElse Not e.Url.Query.IndexOf("oauth_verifier=") = -1 Then
                 ' is the result, verify
                 Dim result = OAuthWeb.VerifyAuthorization(e.Url.ToString())
                 If result.IsSuccessfully Then
                   ' show user info
                   MessageBox.Show _
                   (
                     String.Format _
                     (
                       "User ID: {0}{4}Username: {1}{4}Display Name: {2}{4}E-Mail: {3}",
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       If(Not String.IsNullOrEmpty(result.UserInfo.DisplayName), result.UserInfo.DisplayName, result.UserInfo.FullName),
                       result.UserInfo.Email,
                       vbNewLine
                     ),
                     "Successfully",
                     MessageBoxButtons.OK,
                     MessageBoxIcon.Information
                   )
                 Else
                   ' show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                 End If
                 Me.Close()
               End If
             End Sub
             </code>
             <h2>ASP .NET MVC</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/> in <b>ASP .NET MVC Application</b>.</para>
             <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>.</para>
             <code lang="C#">
             protected void Application_Start()
             {
               OAuthManager.RegisterClient
               (
                 new OdnoklassnikiClient
                 (
                   // application ID
                   "1094959360", 
                   // sectet key
                   "E45991423E8C5AE249B44E84",
                   // public key
                   "CBACMEECEBABABABA"
                 )
               );
             }
             </code>
             <code lang="VB">
             Sub Application_Start()
               OAuthManager.RegisterClient _
               (
                 New OdnoklassnikiClient _
                 (
                   "1094959360", 
                   "E45991423E8C5AE249B44E84",
                   "CBACMEECEBABABABA"  
                 )
               )
             End Sub
             </code>
             <para>The <c>OdnoklassnikiLoginResult</c> method will handle authorization result.</para>
             <code lang="C#">
             public ActionResult OdnoklassnikiLoginResult()
             {
               var result = OAuthWeb.VerifyAuthorization();
               if (result.IsSuccessfully)
               {
                 var user = result.UserInfo;    
                 // NOTE: For StringBuilder import the System.Text
                 StringBuilder r = new StringBuilder();
                 r.AppendFormat("User ID: {0}\r\n", user.UserId);
                 r.AppendFormat("Name:    {0}\r\n", user.DisplayName);
                 r.AppendFormat("Email:   {0}", user.Email);
                 return new ContentResult { Content = r.ToString(), ContentType = "text/plain" }; 
               }
               
               return new ContentResult 
               { 
                 Content = "Error: " + result.ErrorInfo.Message, 
                 ContentType = "text/plain" 
               };
             }
             </code>
             <code lang="VB">
             Public Function OdnoklassnikiLoginResult() As ActionResult
               Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
               If result.IsSuccessfully Then 
                 Dim user As UserInfo = result.UserInfo   
                 ' NOTE: For StringBuilder import the System.Text
                 Dim r As New StringBuilder()
                 r.AppendFormat("User ID: {0}", user.UserId)
                 r.AppendLine()
                 r.AppendFormat("Name:    {0}", user.DisplayName)
                 r.AppendLine()
                 r.AppendFormat("Email:   {0}", user.Email)
                 Return New ContentResult With { .Content = r.ToString(), .ContentType = "text/plain" } 
               End If
               
               Return New ContentResult With _
               { 
                 .Content = "Error: " + result.ErrorInfo.Message, 
                 .ContentType = "text/plain" 
               }
             End Function
             </code>
             <para>Add action method for redirection to the <b>Odnoklassniki</b>.</para>
             <code lang="C#">
             public ActionResult OdnoklassnikiLogin()
             {
               string authUrl = OAuthWeb.GetAuthorizationUrl("Odnoklassniki", Url.Action("OdnoklassnikiLoginResult", "Home", null, null, Request.Url.Host));
               return Redirect(authUrl);
             }
             </code>
             <code lang="VB">
             Public Function OdnoklassnikiLogin() As ActionResult
               Dim authUrl As String = OAuthWeb.GetAuthorizationUrl("Odnoklassniki", Url.Action("OdnoklassnikiLoginResult", "Home", Nothing, Nothing, Request.Url.Host))
               Return Redirect(authUrl)
             End Function
             </code>
             <para>On a page add link to the <c>OdnoklassnikiLogin</c> method.</para>
             <code lang="html">
             @Html.ActionLink("Log in with Odnoklassniki", "OdnoklassnikiLogin")
             </code>
             <h2>ASP .NET WebForms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/> in <b>ASP .NET WebForms</b>.</para>
             <para>To test the example, create a new <b>ASP .NET WebForms</b> (empty) project. Add <b>Global.asax</b>.</para>
             <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.Security;
             using System.Web.SessionState;
             using Nemiro.OAuth;
             using Nemiro.OAuth.Clients;
             
             namespace Test.CSharp.AspWebForms
             {
               public class Global : System.Web.HttpApplication
               {
                 protected void Application_Start(object sender, EventArgs e)
                 {
                   OAuthManager.RegisterClient
                   (
                     new OdnoklassnikiClient
                     (
                       // application ID 
                       "1094959360",
                       // sectet key 
                       "E45991423E8C5AE249B44E84",
                       // public key 
                       "CBACMEECEBABABABA"
                     )
                   );
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             Imports Nemiro.OAuth.Clients
             
             Public Class Global_asax
               Inherits System.Web.HttpApplication
             
               Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
                 OAuthManager.RegisterClient _
                 (
                   New OdnoklassnikiClient _
                   (
                     "1094959360",
                     "E45991423E8C5AE249B44E84",
                     "CBACMEECEBABABABA"
                   )
                 )
               End Sub
             
             End Class
             </code>
             <para>Add <b>ExternalLoginResult.aspx</b>.</para>
             <code lang="html">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="ExternalLoginResult.aspx.cs" Inherits="Test.CSharp.AspWebForms.ExternalLoginResult" %gt;</code>
             <para>And add the following code.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.UI;
             using System.Web.UI.WebControls;
             using Nemiro.OAuth;
             
             namespace Test.CSharp.AspWebForms
             {
               public partial class ExternalLoginResult : System.Web.UI.Page
               {
                 protected void Page_Load(object sender, EventArgs e)
                 {
                   Response.Write("&lt;pre&gt;");
                   var result = OAuthWeb.VerifyAuthorization();
                   if (result.IsSuccessfully)
                   {
                     var user = result.UserInfo;
                     Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId));
                     Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName));
                     Response.Write(String.Format("Email:   {0}", user.Email));
                   }
                   else
                   {
                     Response.Write(result.ErrorInfo.Message);
                   }
                   Response.Write("&lt;/pre&gt;");
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             
             Public Class ExternalLoginResult
               Inherits System.Web.UI.Page
             
               Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
                 Response.Write("&lt;pre&gt;")
                 Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
                 If result.IsSuccessfully Then
                   Dim user As UserInfo = result.UserInfo
                   Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId))
                   Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName))
                   Response.Write(String.Format("Email:   {0}", user.Email))
                 Else
                   Response.Write(result.ErrorInfo.Message)
                 End If
                 Response.Write("&lt;/pre&gt;")
               End Sub
             
             End Class
             </code>
             <para>Add <b>Default.aspx</b> and insert one <b>LinkButton</b> to the page.</para>
             <code lang="html">
             &lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="Test.CSharp.AspWebForms.Default" %&gt;
             
             &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
             
             &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
             &lt;head runat="server"&gt;
                 &lt;title&gt;&lt;/title&gt;
             &lt;/head&gt;
             &lt;body&gt;
                 &lt;form id="form1" runat="server"&gt;
                 &lt;div&gt;
                 &lt;asp:LinkButton ID="lnkOdnoklassniki" runat="server" 
                     Text="Log in with Odnoklassniki" onclick="lnkOdnoklassniki_Click" /&gt;
                 &lt;/div&gt;
                 &lt;/form&gt;
             &lt;/body&gt;
             &lt;/html&gt;
             </code>
             <para>Add a handler for a click on the link.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.UI;
             using System.Web.UI.WebControls;
             using Nemiro.OAuth;
             
             namespace Test.CSharp.AspWebForms
             {
               public partial class Default : System.Web.UI.Page
               {
                 protected void lnkOdnoklassniki_Click(object sender, EventArgs e)
                 {
                   OAuthWeb.RedirectToAuthorization("Odnoklassniki", new Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri);
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             
             Public Class _Default
               Inherits System.Web.UI.Page
             
               Protected Sub lnkOdnoklassniki_Click(sender As Object, e As EventArgs) Handles lnkOdnoklassniki.Click
                 OAuthWeb.RedirectToAuthorization("Odnoklassniki", New Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri)
               End Sub
             
             End Class
             </code>
             </example>
             <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.OdnoklassnikiClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>.
            </summary>
            <param name="clientId">The Client ID.</param>
            <param name="clientSecret">The Client Secret.</param>
            <param name="publickKey">The Public Key.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.OdnoklassnikiClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <exception cref="T:Nemiro.OAuth.ApiException"/>
        </member>
        <member name="P:Nemiro.OAuth.Clients.OdnoklassnikiClient.ProviderName">
            <summary>
            Unique provider name: <b>Odnoklassniki</b>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.OdnoklassnikiClient.ApplicationKey">
            <summary>
            Public Key for access to API.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.CustomParse">
            <summary>
            Represents a method that is called for parsing item of the API data.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.ErrorResult">
            <summary>
            Represents the error results of the query.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.ErrorResult.#ctor(Nemiro.OAuth.RequestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ErrorResult"/> class.
            </summary>
            <param name="result">The request results.</param>
        </member>
        <member name="T:Nemiro.OAuth.AccessDeniedException">
            <summary>
            The exception that is thrown when a resource owner or authorization server denied the request.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.AuthorizationException">
            <summary>
            The exception that is thrown when a user fails to login.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.AuthorizationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.AuthorizationException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="M:Nemiro.OAuth.AccessDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.AccessDeniedException"/> class with a specified error message and the exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for this exception.</param>
        </member>
        <member name="T:Nemiro.OAuth.ClientIsNotRegisteredException">
            <summary>
            The exception that is thrown when trying to access an unregistered OAuth client.
            </summary>
            <remarks>
            <para>Use the <see cref="M:Nemiro.OAuth.OAuthManager.RegisterClient(Nemiro.OAuth.OAuthBase)"/> for OAuth clients registration.</para>
            </remarks>
            <example>
            <para>The following example illustrates a situation in which the <see cref="T:Nemiro.OAuth.ClientIsNotRegisteredException"/> is thrown.</para>
            <code lang="C#">
            string url = OAuthWeb.GetAuthorizationUrl("facebook");
            // ...
            </code>
            <code lang="VB">
            Dim url As String = OAuthWeb.GetAuthorizationUrl("facebook");
            ' ...
            </code>
            <para><term><img src="../img/ex001.png" alt="ClientIsNotRegisteredException"/></term></para>
            <para>To solve the problem enough to register the client.</para>
            <code lang="C#">
            // facebook client registration
            OAuthManager.RegisterClient
            (
              new FacebookClient
              (
                "1435890426686808", 
                "c6057dfae399beee9e8dc46a4182e8fd"
              )
            );
            </code>
            <code lang="VB">
            ' facebook client registration
            OAuthManager.RegisterClient _
            (
              New FacebookClient _
              (
                "1435890426686808", 
                "c6057dfae399beee9e8dc46a4182e8fd"
              )
            )
            </code>
            <para>Enjoy!</para>
            <code lang="C#">
            string url = OAuthWeb.GetAuthorizationUrl("facebook");
            // ...
            </code>
            <code lang="VB">
            Dim url As String = OAuthWeb.GetAuthorizationUrl("facebook");
            ' ...
            </code>
            </example>
        </member>
        <member name="M:Nemiro.OAuth.ClientIsNotRegisteredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ClientIsNotRegisteredException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.EmptyResult">
            <summary>
            Represents the empty results of the query.
            </summary>
            <remarks>
            <para>The class is used to determine sends a request to the remote server or not.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.EmptyResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.EmptyResult"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.DuplicateProviderException">
            <summary>
            The exception that is thrown when you attempt to register the already registered client.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.DuplicateProviderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.DuplicateProviderException"/> class.
            </summary>
            <param name="providerName">The name of the provider.</param>
        </member>
        <member name="T:Nemiro.OAuth.NullHttpContextException">
            <summary>
            The exception that is thrown when <b>HttpContext.Current</b> is <b>null</b> (<b>Nothing</b> in Visual Basic).
            </summary>
            <remarks>
            <para>The exception that is thrown when you try to access methods that are designed for web projects.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.NullHttpContextException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.NullHttpContextException"/> class.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.UnknownProviderException">
            <summary>
            The exception occurs when you try to access a provider by provider name. If the name is incorrect, or does not exist.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.UnknownProviderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.UnknownProviderException"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.UnknownProviderException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.UnknownProviderException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for this exception.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="T:Nemiro.OAuth.Helpers">
            <summary>
            The main helper class.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthUtility">
            <summary>
            Provides helpers methods for OAuth.
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.OAuthUtility.UnreservedCharacters">
            <summary>
            Unreserved characters for the <see cref="M:Nemiro.OAuth.OAuthUtility.UrlEncode(System.String)"/> method.
            </summary>
            <remarks>
            http://tools.ietf.org/html/rfc3986#page-13
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.#cctor">
            <summary>
            This is helper class.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.UrlEncode(System.String)">
            <summary>
            Percent encoding (only for OAuth 1.0).
            </summary>
            <param name="value">Value for encoding.</param>
            <remarks>
            <para>For more details, please see:</para>
            <list type="bullet">
            <item><description><see href="http://en.wikipedia.org/wiki/Percent-encoding"/></description></item>
            <item><description><see href="http://tools.ietf.org/html/rfc3986"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetTimeStamp">
            <summary>
            Generate timestamp for a signature (only for OAuth 1.0).
            </summary>
            <remarks>
            <para>
            The timestamp value MUST be a positive integer.  Unless otherwise
            specified by the server's documentation, the timestamp is expressed
            in the number of seconds since January 1, 1970 00:00:00 GMT.
            </para>
            <para>For more details, please see: <see href="http://tools.ietf.org/html/rfc5849#section-3.3"/></para>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetRandomKey">
            <summary>
            Generate random key.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetMD5Hash(System.String)">
            <summary>
            Compute MD5 hash.
            </summary>
            <param name="value">Value that must be processed.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.ToBase64String(System.String,System.Object[])">
            <summary>
            Converts the string value to its equivalent string representation that is encoded with base-64 digits.
            </summary>
            <param name="value">A composite format string for encoding to Base64.</param>
            <param name="args">An object array that contains zero or more objects to format. </param>
            <returns>The string representation, in base 64.</returns>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.ExecuteRequest(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Performs a web request.
            </summary>
            <param name="method">HTTP Method: <b>POST</b> (default) or <b>GET</b>.</param>
            <param name="endpoint">URL to which will be sent to web request.</param>
            <param name="parameters">Parameters to be passed to web request.</param>
            <param name="authorization">Authorization header value.</param>
            <param name="headers">HTTP headers for web request.</param>
            <returns>Returns an instance of the <see cref="T:Nemiro.OAuth.RequestResult"/> class, which contains the result of the web request.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:Nemiro.OAuth.RequestException"></exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.ReadResponseStream(System.Net.HttpWebResponse)">
            <summary>
            Reads results of the web request to the string.
            </summary>
            <param name="resp"><see cref="T:System.Net.HttpWebResponse"/> instance.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetDictionaryValueOrNull(System.Object,System.String)">
            <summary>
            Gets the value of the specified <paramref name="key"/>, if the <paramref name="source"/> is a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
            <param name="source">Source of data.</param>
            <param name="key">The key is to be obtained.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetSignature(System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,Nemiro.OAuth.OAuthAuthorization)">
            <summary>
            Gets signature for the current request.
            </summary>
            <param name="httpMethod">The HTTP method: <b>GET</b> or <b>POST</b>. Default is <b>POST</b>.</param>
            <param name="url">The request URI.</param>
            <param name="tokenSecret">The token secret.</param>
            <param name="parameters">The query parameters.</param>
            <param name="applicationSecret">The application secret key obtained from the provider website.</param>
            <param name="authorization">The authorization parameters.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetSignature(System.String,System.Uri,System.String,System.String,System.Collections.Specialized.NameValueCollection,Nemiro.OAuth.OAuthAuthorization)">
            <summary>
            Gets signature for the current request.
            </summary>
            <param name="httpMethod">The HTTP method: <b>GET</b> or <b>POST</b>. Default is <b>POST</b>.</param>
            <param name="url">The request URI.</param>
            <param name="tokenSecret">The token secret.</param>
            <param name="parameters">The query parameters.</param>
            <param name="applicationSecret">The application secret key obtained from the provider website.</param>
            <param name="authorization">The authorization parameters.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetSignatureBaseString(System.String,System.String,System.Collections.Specialized.NameValueCollection,Nemiro.OAuth.OAuthAuthorization)">
            <summary>
            Gets base string of the signature for current request (OAuth 1.0).
            </summary>
            <remarks><para>For more details, please visit <see href="http://tools.ietf.org/html/rfc5849#section-3.4.1.1"/></para></remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthUtility.GetSignatureBaseString(System.String,System.Uri,System.Collections.Specialized.NameValueCollection,Nemiro.OAuth.OAuthAuthorization)">
            <summary>
            Gets base string of the signature for current request (OAuth 1.0).
            </summary>
            <remarks><para>For more details, please visit <see href="http://tools.ietf.org/html/rfc5849#section-3.4.1.1"/></para></remarks>
        </member>
        <member name="T:Nemiro.OAuth.OAuth2AccessToken">
            <summary>
            The access token class for OAuth 2.0.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuth2AccessToken.#ctor(Nemiro.OAuth.RequestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuth2AccessToken"/> class.
            </summary>
            <param name="result">Result of request to the OAuth server.</param>
        </member>
        <member name="P:Nemiro.OAuth.OAuth2AccessToken.ExpiresIn">
            <summary>
            The lifetime in seconds of the access token.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuth2AccessToken.RefreshToken">
            <summary>
            The refresh token, which can be used to obtain new
            access tokens using the same authorization grant.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuth2AccessToken.Scope">
            <summary>
            The scope of the access token.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuth2AccessToken.TokenType">
            <summary>
            The type of the token issued. Value is case insensitive.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Sex">
            <summary>
            Very sexy list.
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.Sex.None">
            <summary>
            No sex.
            </summary>
            <remarks>:o)</remarks>
        </member>
        <member name="F:Nemiro.OAuth.Sex.Male">
            <summary>
            Male.
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.Sex.Female">
            <summary>
            Female.
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.Sex.Programmer">
            <summary>
            Programmer.
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.Sex.DeepThought">
            <summary>
            Deep Thought.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Extensions.NameValueCollectionExtension">
            <summary>
            Represents a class that extends the <see cref="T:System.Collections.Specialized.NameValueCollection"/> class by adding methods for use with query parameters.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.ToKeyValuePairCollection(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Convert the <see cref="T:System.Collections.Specialized.NameValueCollection"/> to list of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.ToParametersString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns a string of query parameters without a separator.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.ToParametersString(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Returns a string of query parameters with a specified separator.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
            <param name="separator">The separator of query parameters. For example: &amp;</param>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.ToParametersString(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Returns a string of query parameters with a specified encoding parameters.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
            <param name="noencoding">Disables parameters encoding.</param>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.ToParametersString(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Returns a string of query parameters with a specified separator and encoding parameters.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
            <param name="separator">The separator of query parameters.</param>
            <param name="noencoding">Disables parameters encoding.</param>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.Sort(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sorts the <see cref="T:System.Collections.Specialized.NameValueCollection"/> by alphabetically and returns a new <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Extensions.NameValueCollectionExtension.RemoveKey(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Removes the value with the specified key from the <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Specialized.NameValueCollection"/>.</param>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="T:Nemiro.OAuth.OAuthRequest">
            <summary>
            Represents the request item to OAuth server.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthRequest.#ctor(Nemiro.OAuth.OAuthBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthRequest"/> class.
            </summary>
            <param name="client">The instance of the OAuth client.</param>
        </member>
        <member name="P:Nemiro.OAuth.OAuthRequest.Client">
            <summary>
            Gets instance of the OAuth client.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthRequest.DateCreated">
            <summary>
            Gets date and time creation of the request.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthWeb">
             <summary>
             Represents helper class for sessions management of OAuth.
             </summary>
             <remarks>
             <para>Mainly the class is intended for web projects.</para>
             <para>But you can use some methods of the class in desktop applications together with the <b>WebBrowser</b> control.</para>
             <para>
             The methods <see cref="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String)"/>, 
             <see cref="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String,System.String)"/>, 
             <see cref="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String,System.Collections.Specialized.NameValueCollection,System.String)"/> and
             <see cref="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization"/>
             will not work in desktop applications.
             </para>
             </remarks>
             <example>
             <h2>ASP .NET WebForms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/> in <b>ASP .NET WebForms</b>.</para>
             <para>To redirect the user to the login page is used the <see cref="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String,System.String)"/> method.</para>
             <para>Processing of the authorization results is performed by <see cref="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization"/>.</para>
             <para>To test the example, create a new <b>ASP .NET WebForms</b> (empty) project. Add <b>Global.asax</b>.</para>
             <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/>.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.Security;
             using System.Web.SessionState;
             using Nemiro.OAuth;
             using Nemiro.OAuth.Clients;
             
             namespace Test.CSharp.AspWebForms
             {
               public class Global : System.Web.HttpApplication
               {
                 protected void Application_Start(object sender, EventArgs e)
                 {
                   OAuthManager.RegisterClient
                   (
                     new TwitterClient
                     (
                       "cXzSHLUy57C4gTBgMGRDuqQtr",
                       "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
                     )
                   );
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             Imports Nemiro.OAuth.Clients
             
             Public Class Global_asax
               Inherits System.Web.HttpApplication
             
               Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
                 OAuthManager.RegisterClient _
                 (
                   New TwitterClient _
                   (
                     "cXzSHLUy57C4gTBgMGRDuqQtr",
                     "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
                   )
                 )
               End Sub
             
             End Class
             </code>
             <para>Add <b>ExternalLoginResult.aspx</b>.</para>
             <code lang="html">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="ExternalLoginResult.aspx.cs" Inherits="Test.CSharp.AspWebForms.ExternalLoginResult" %gt;</code>
             <para>And add the following code.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.UI;
             using System.Web.UI.WebControls;
             using Nemiro.OAuth;
             
             namespace Test.CSharp.AspWebForms
             {
               public partial class ExternalLoginResult : System.Web.UI.Page
               {
                 protected void Page_Load(object sender, EventArgs e)
                 {
                   Response.Write("&lt;pre&gt;");
                   var result = OAuthWeb.VerifyAuthorization();
                   if (result.IsSuccessfully)
                   {
                     var user = result.UserInfo;
                     Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId));
                     Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName));
                   }
                   else
                   {
                     Response.Write(result.ErrorInfo.Message);
                   }
                   Response.Write("&lt;/pre&gt;");
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             
             Public Class ExternalLoginResult
               Inherits System.Web.UI.Page
             
               Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
                 Response.Write("&lt;pre&gt;")
                 Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
                 If result.IsSuccessfully Then
                   Dim user As UserInfo = result.UserInfo
                   Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId))
                   Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName))
                 Else
                   Response.Write(result.ErrorInfo.Message)
                 End If
                 Response.Write("&lt;/pre&gt;")
               End Sub
             
             End Class
             </code>
             <para>Add <b>Default.aspx</b> and insert one <b>LinkButton</b> to the page.</para>
             <code lang="html">
             &lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="Test.CSharp.AspWebForms.Default" %&gt;
             
             &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
             
             &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
             &lt;head runat="server"&gt;
                 &lt;title&gt;&lt;/title&gt;
             &lt;/head&gt;
             &lt;body&gt;
                 &lt;form id="form1" runat="server"&gt;
                 &lt;div&gt;
                 &lt;asp:LinkButton ID="lnkTwitter" runat="server" 
                     Text="Log in with Twitter" onclick="lnkTwitter_Click" /&gt;
                 &lt;/div&gt;
                 &lt;/form&gt;
             &lt;/body&gt;
             &lt;/html&gt;
             </code>
             <para>Add a handler for a click on the link.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.UI;
             using System.Web.UI.WebControls;
             using Nemiro.OAuth;
             
             namespace Test.CSharp.AspWebForms
             {
               public partial class Default : System.Web.UI.Page
               {
                 protected void lnkTwitter_Click(object sender, EventArgs e)
                 {
                   OAuthWeb.RedirectToAuthorization("Twitter", new Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri);
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             
             Public Class _Default
               Inherits System.Web.UI.Page
             
               Protected Sub lnkTwitter_Click(sender As Object, e As EventArgs) Handles lnkTwitter.Click
                 OAuthWeb.RedirectToAuthorization("Twitter", New Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri)
               End Sub
             
             End Class
             </code>
             <h2>Windows Forms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.MailRuClient"/> in desktop applications.</para>
             <para>Methods redirection in Windows Forms applications do not work. To get the address of the authorization <see cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String)"/> is used.</para>
             <para>To test the example, create a new <b>Windows Forms</b> project with two forms. Add a <c>Button</c> to the <c>Form1</c>.</para>
             <code lang="C#">
             public Form1()
             {
               InitializeComponent();
               button1.Click += new EventHandler(button1_Click);
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
               // mail.ru client registration
               OAuthManager.RegisterClient
               (
                 new MailRuClient
                 (
                   "722701", 
                   "d0622d3d9c9efc69e4ca42aa173b938a"
                 )
               );
             }
             
             private void button1_Click(object sender, EventArgs e)
             {
               var frm = new Form2();
               frm.ShowDialog();
             }
             </code>
             <code lang="VB">
             Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               ' mail.ru client registration
               OAuthManager.RegisterClient _
               (
                 New MailRuClient _
                 (
                   "722701",
                   "d0622d3d9c9efc69e4ca42aa173b938a"
                 )
               )
             End Sub
             
             Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
               Call New Form2().ShowDialog()
             End Sub
             </code>
             <para>Add a <c>WebBrowser</c> to the <c>Form2</c>.</para>
             <code lang="C#">
             public Form2()
             {
               InitializeComponent();
               webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);
               webBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("Mail.Ru"));
             }
             
             private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
             {
               // waiting for results
               if (e.Url.Query.IndexOf("code=") != -1 || e.Url.Fragment.IndexOf("code=") != -1 || e.Url.Query.IndexOf("oauth_verifier=") != -1)
               {
                 // is the result, verify
                 var result = OAuthWeb.VerifyAuthorization(e.Url.ToString());
                 if (result.IsSuccessfully)
                 {
                   // show user info
                   MessageBox.Show
                   (
                     String.Format
                     (
                       "User ID: {0}\r\nUsername: {1}\r\nDisplay Name: {2}\r\nE-Mail: {3}", 
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       result.UserInfo.DisplayName ?? result.UserInfo.FullName,
                       result.UserInfo.Email
                     ), 
                     "Successfully", 
                     MessageBoxButtons.OK, 
                     MessageBoxIcon.Information
                   );
                 }
                 else
                 {
                   // show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 }
                 this.Close();
               }
             }
             </code>
             <code lang="VB">
             Private Sub Form2_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               WebBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("Mail.Ru"))
             End Sub
            
             Private Sub WebBrowser1_DocumentCompleted(sender As System.Object, e As System.Windows.Forms.WebBrowserDocumentCompletedEventArgs) Handles WebBrowser1.DocumentCompleted
               ' waiting for results
               If Not e.Url.Query.IndexOf("code=") = -1 OrElse Not e.Url.Fragment.IndexOf("code=") = -1 OrElse Not e.Url.Query.IndexOf("oauth_verifier=") = -1 Then
                 ' is the result, verify
                 Dim result = OAuthWeb.VerifyAuthorization(e.Url.ToString())
                 If result.IsSuccessfully Then
                   ' show user info
                   MessageBox.Show _
                   (
                     String.Format _
                     (
                       "User ID: {0}{4}Username: {1}{4}Display Name: {2}{4}E-Mail: {3}",
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       If(Not String.IsNullOrEmpty(result.UserInfo.DisplayName), result.UserInfo.DisplayName, result.UserInfo.FullName),
                       result.UserInfo.Email,
                       vbNewLine
                     ),
                     "Successfully",
                     MessageBoxButtons.OK,
                     MessageBoxIcon.Information
                   )
                 Else
                   ' show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                 End If
                 Me.Close()
               End If
             End Sub
             </code>
             </example>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String)">
            <summary>
            Redirects current client to the authorization page of the specified provider.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <exception cref="T:Nemiro.OAuth.ClientIsNotRegisteredException">
            <paramref name="providerName"/> is unregistered. Use the <see cref="M:Nemiro.OAuth.OAuthManager.RegisterClient(Nemiro.OAuth.OAuthBase)"/> for OAuth clients registration.
            </exception>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
            <remarks>
            <para>The method will not work in desktop applications. For desktop applications you can use <see cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String)"/>.</para>
            </remarks>
            <seealso cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String)"/>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects current client to the authorization page of the specified provider with specified parameters.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <param name="parameters">Additional parameters to be passed to the authorization query.</param>
            <exception cref="T:Nemiro.OAuth.ClientIsNotRegisteredException">
            <paramref name="providerName"/> is unregistered. Use the <see cref="M:Nemiro.OAuth.OAuthManager.RegisterClient(Nemiro.OAuth.OAuthBase)"/> for OAuth clients registration.
            </exception>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
            <remarks>
            <para>The method will not work in desktop applications. For desktop applications you can use <see cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.Collections.Specialized.NameValueCollection)"/>.</para>
            </remarks>
            <seealso cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.Collections.Specialized.NameValueCollection)"/>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String,System.String)">
            <summary>
            Redirects current client to the authorization page of the specified provider and return URL.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <param name="returnUrl">The address to which the user is redirected after the authorization.</param>
            <exception cref="T:Nemiro.OAuth.ClientIsNotRegisteredException">
            <paramref name="providerName"/> is unregistered. Use the <see cref="M:Nemiro.OAuth.OAuthManager.RegisterClient(Nemiro.OAuth.OAuthBase)"/> for OAuth clients registration.
            </exception>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
            <remarks>
            <para>The method will not work in desktop applications. For desktop applications you can use <see cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.String)"/>.</para>
            </remarks>
            <seealso cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.String)"/>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.RedirectToAuthorization(System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Redirects current client to the authorization page of the specified provider, query parameters and return URL.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <param name="returnUrl">The address to which the user is redirected after the authorization.</param>
            <param name="parameters">Additional parameters to be passed to the authorization query.</param>
            <exception cref="T:Nemiro.OAuth.ClientIsNotRegisteredException">
            <paramref name="providerName"/> is unregistered. Use the <see cref="M:Nemiro.OAuth.OAuthManager.RegisterClient(Nemiro.OAuth.OAuthBase)"/> for OAuth clients registration.
            </exception>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
            <remarks>
            <para>The method will not work in desktop applications. For desktop applications you can use <see cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.Collections.Specialized.NameValueCollection,System.String)"/>.</para>
            </remarks>
            <seealso cref="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.Collections.Specialized.NameValueCollection,System.String)"/>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String)">
            <summary>
            Returns the authorization URL of the specified provider.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the authorization URL of the specified provider with specified parameters.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <param name="parameters">Additional parameters to be passed to the authorization URL.</param>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.String)">
            <summary>
            Returns the authorization URL of the specified provider and return URL.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <param name="returnUrl">The address to which the user is redirected after the authorization.</param>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.GetAuthorizationUrl(System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Returns the authorization URL of the specified provider, query parameters and return URL.
            </summary>
            <param name="providerName">Provider name, through which it is necessary to authorize the current user.</param>
            <param name="parameters">Additional parameters to be passed to the authorization URL.</param>
            <param name="returnUrl">The address to which the user is redirected after the authorization.</param>
            <exception cref="T:Nemiro.OAuth.NullHttpContextException">
            The exception that is thrown when you try to access methods that are designed for web projects.
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization">
            <summary>
            Verifies the authorization results for the current URL.
            </summary>
            <remarks>
            <para>The method will not work in desktop applications. For desktop applications you can use the overloads <see cref="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization(System.String)"/> or <see cref="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization(System.String,System.String)"/>.</para>
            </remarks>
            <returns>
            <para>Returns the verification results.</para>
            </returns>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization(System.String)">
            <summary>
            Verifies the authorization results for the specified URL.
            </summary>
            <param name="url">Address at which to perform the verification.</param>
            <returns>
            <para>Returns the verification results.</para>
            </returns>
        </member>
        <member name="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization(System.String,System.String)">
            <summary>
            Verifies the authorization results for the specified request identifier and the code of the authorization.
            </summary>
            <param name="requestId">Request identifier.</param>
            <param name="code">The authorization code received from the provider server.</param>
            <returns>
            <para>Returns the verification results.</para>
            </returns>
            <remarks>
            <para>This method is intended for internal use. It is recommended to use the overload <see cref="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization"/> or <see cref="M:Nemiro.OAuth.OAuthWeb.VerifyAuthorization(System.String)"/>.</para>
            </remarks>
        </member>
        <member name="T:Nemiro.OAuth.OAuthAccessToken">
            <summary>
            The access token class for OAuth 1.0.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthAccessToken.#ctor(Nemiro.OAuth.RequestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthAccessToken"/> class.
            </summary>
            <param name="result">Result of request to the OAuth server.</param>
        </member>
        <member name="P:Nemiro.OAuth.OAuthAccessToken.TokenSecret">
            <summary>
            The access token issued by the authorization server.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthAuthorization">
            <summary>
            Represents authorization parameters for OAuth.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthAuthorization.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthAuthorization"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthAuthorization.SetSignature(System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets signature.
            </summary>
            <param name="httpMethod">The HTTP method: <b>GET</b> or <b>POST</b>. Default is <b>POST</b>.</param>
            <param name="url">The request URI.</param>
            <param name="tokenSecret">The token secret.</param>
            <param name="parameters">The query parameters.</param>
            <param name="applicationSecret">The application secret key obtained from the provider website.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthAuthorization.SetSignature(System.String,System.Uri,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Sets signature.
            </summary>
            <param name="httpMethod">The HTTP method: <b>GET</b> or <b>POST</b>. Default is <b>POST</b>.</param>
            <param name="url">The request URI.</param>
            <param name="tokenSecret">The token secret.</param>
            <param name="parameters">The query parameters.</param>
            <param name="applicationSecret">The application secret key obtained from the provider website.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthAuthorization.ToString">
            <summary>
            Returns OAuth string of the current object for Authorization header. 
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthAuthorization.Parameters">
            <summary>
            Authorization parameters.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthAuthorization.ParametersSorted">
            <summary>
            Sorted authorization parameters.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthAuthorization.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
        </member>
        <member name="T:Nemiro.OAuth.Clients.MailRuClient">
             <summary>
             OAuth client for <b>Mail.Ru</b>.
             </summary>
             <remarks>
             <para><b>Mail.Ru</b> is a popular email service, search engine, social network, photo &amp; video hosting, blogs and another services in Russia and CIS.</para>
             <h1>Register and Configure a Mail.Ru Site</h1>
             <list type="table">
             <item>
             <term><img src="../img/warning.png" alt="(!)" title=""/></term>
             <term>
             <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
             If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
             If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
             </term>
             </item>
             </list>
             <para>Unfortunately, the interface is only in Russian.</para>
             <para>You must have a confirmed account in Mail.Ru.</para>
             <para>Open <see href="http://api.mail.ru/sites/my/">Sites</see> page and click <see href="http://api.mail.ru/sites/my/add/">Connect a New Site</see>.</para>
             <para>
             <img src="../img/mailru001.png" alt="Create a New Site button"/>
             </para>
             <para>Accept the terms of the agreement.</para>
             <para>
             <img src="../img/mailru002.png" alt="Terms"/>
             </para>
             <para>Enter the site name, URL and click the <b>Next</b> button.</para>
             <para>
             <img src="../img/mailru003.png" alt="Site name and URL"/>
             </para>
             <para>Download the <b>receiver.html</b> file and place it in the root directory of your site.</para>
             <para>This step can be <i>skipped</i> (<i>Пропустить</i>).</para>
             <para>
             <img src="../img/mailru004.png" alt="receiver.html file"/>
             </para>
             <para>The last step you will find the <b>Client ID</b> and <b>Client Secret</b>.</para>
             <para>
             Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.MailRuClient"/>.
             </para>
             <para>
             <img src="../img/mailru005.png" alt="Cleint ID and Client Secret"/>
             </para>
             <code lang="C#">
             OAuthManager.RegisterClient
             (
               new MailRuClient
               (
                 "722701", 
                 "d0622d3d9c9efc69e4ca42aa173b938a"
               )
             );
             </code>
             <code lang="VB">
             OAuthManager.RegisterClient _
             (
               New MailRuClient _
               (
                 "722701", 
                 "d0622d3d9c9efc69e4ca42aa173b938a"
               )
             )
             </code>
             <para>
             For more details, please visit to the <see href="http://api.mail.ru/docs/">Mail.Ru API Documentation</see>.
             </para>
             </remarks>
             <example>
             <h2>Windows Forms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.MailRuClient"/> in desktop applications.</para>
             <para>To test the example, create a new <b>Windows Forms</b> project with two forms. Add a <c>Button</c> to the <c>Form1</c>.</para>
             <code lang="C#">
             public Form1()
             {
               InitializeComponent();
               button1.Click += new EventHandler(button1_Click);
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
               // mail.ru client registration
               OAuthManager.RegisterClient
               (
                 new MailRuClient
                 (
                   "722701", 
                   "d0622d3d9c9efc69e4ca42aa173b938a"
                 )
               );
             }
             
             private void button1_Click(object sender, EventArgs e)
             {
               var frm = new Form2();
               frm.ShowDialog();
             }
             </code>
             <code lang="VB">
             Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               ' mail.ru client registration
               OAuthManager.RegisterClient _
               (
                 New MailRuClient _
                 (
                   "722701",
                   "d0622d3d9c9efc69e4ca42aa173b938a"
                 )
               )
             End Sub
             
             Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
               Call New Form2().ShowDialog()
             End Sub
             </code>
             <para>Add a <c>WebBrowser</c> to the <c>Form2</c>.</para>
             <code lang="C#">
             public Form2()
             {
               InitializeComponent();
               webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);
               webBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("Mail.Ru"));
             }
             
             private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
             {
               // waiting for results
               if (e.Url.Query.IndexOf("code=") != -1 || e.Url.Fragment.IndexOf("code=") != -1 || e.Url.Query.IndexOf("oauth_verifier=") != -1)
               {
                 // is the result, verify
                 var result = OAuthWeb.VerifyAuthorization(e.Url.ToString());
                 if (result.IsSuccessfully)
                 {
                   // show user info
                   MessageBox.Show
                   (
                     String.Format
                     (
                       "User ID: {0}\r\nUsername: {1}\r\nDisplay Name: {2}\r\nE-Mail: {3}", 
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       result.UserInfo.DisplayName ?? result.UserInfo.FullName,
                       result.UserInfo.Email
                     ), 
                     "Successfully", 
                     MessageBoxButtons.OK, 
                     MessageBoxIcon.Information
                   );
                 }
                 else
                 {
                   // show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 }
                 this.Close();
               }
             }
             </code>
             <code lang="VB">
             Private Sub Form2_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               WebBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("Mail.Ru"))
             End Sub
            
             Private Sub WebBrowser1_DocumentCompleted(sender As System.Object, e As System.Windows.Forms.WebBrowserDocumentCompletedEventArgs) Handles WebBrowser1.DocumentCompleted
               ' waiting for results
               If Not e.Url.Query.IndexOf("code=") = -1 OrElse Not e.Url.Fragment.IndexOf("code=") = -1 OrElse Not e.Url.Query.IndexOf("oauth_verifier=") = -1 Then
                 ' is the result, verify
                 Dim result = OAuthWeb.VerifyAuthorization(e.Url.ToString())
                 If result.IsSuccessfully Then
                   ' show user info
                   MessageBox.Show _
                   (
                     String.Format _
                     (
                       "User ID: {0}{4}Username: {1}{4}Display Name: {2}{4}E-Mail: {3}",
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       If(Not String.IsNullOrEmpty(result.UserInfo.DisplayName), result.UserInfo.DisplayName, result.UserInfo.FullName),
                       result.UserInfo.Email,
                       vbNewLine
                     ),
                     "Successfully",
                     MessageBoxButtons.OK,
                     MessageBoxIcon.Information
                   )
                 Else
                   ' show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                 End If
                 Me.Close()
               End If
             End Sub
             </code>
             <para>Result of the program is shown in the images below.</para>
             <para><img src="../img/mailru006.png" alt="Log in with Mail.Ru"/></para>
             <para><img src="../img/mailru007.png" alt="Mail.Ru User Info"/></para>
             <h2>ASP .NET MVC</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.MailRuClient"/> in <b>ASP .NET MVC Application</b>.</para>
             <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.MailRuClient"/>.</para>
             <code lang="C#">
             protected void Application_Start()
             {
               OAuthManager.RegisterClient
               (
                 new MailRuClient
                 (
                   "722701", 
                   "d0622d3d9c9efc69e4ca42aa173b938a"
                 )
               );
             }
             </code>
             <code lang="VB">
             Sub Application_Start()
               OAuthManager.RegisterClient _
               (
                 New MailRuClient _
                 (
                   "722701", 
                   "d0622d3d9c9efc69e4ca42aa173b938a"
                 )
               )
             End Sub
             </code>
             <para>The <c>MailRuLoginResult</c> method will handle authorization result.</para>
             <code lang="C#">
             public ActionResult MailRuLoginResult()
             {
               var result = OAuthWeb.VerifyAuthorization();
               if (result.IsSuccessfully)
               {
                 var user = result.UserInfo;    
                 // NOTE: For StringBuilder import the System.Text
                 StringBuilder r = new StringBuilder();
                 r.AppendFormat("User ID: {0}\r\n", user.UserId);
                 r.AppendFormat("Name:    {0}\r\n", user.DisplayName);
                 r.AppendFormat("Email:   {0}", user.Email);
                 return new ContentResult { Content = r.ToString(), ContentType = "text/plain" }; 
               }
               
               return new ContentResult 
               { 
                 Content = "Error: " + result.ErrorInfo.Message, 
                 ContentType = "text/plain" 
               };
             }
             </code>
             <code lang="VB">
             Public Function MailRuLoginResult() As ActionResult
               Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
               If result.IsSuccessfully Then 
                 Dim user As UserInfo = result.UserInfo   
                 ' NOTE: For StringBuilder import the System.Text
                 Dim r As New StringBuilder()
                 r.AppendFormat("User ID: {0}", user.UserId)
                 r.AppendLine()
                 r.AppendFormat("Name:    {0}", user.DisplayName)
                 r.AppendLine()
                 r.AppendFormat("Email:   {0}", user.Email)
                 Return New ContentResult With { .Content = r.ToString(), .ContentType = "text/plain" } 
               End If
               
               Return New ContentResult With _
               { 
                 .Content = "Error: " + result.ErrorInfo.Message, 
                 .ContentType = "text/plain" 
               }
             End Function
             </code>
             <para>Add action method for redirection to the <b>Mail.Ru</b>.</para>
             <code lang="C#">
             public ActionResult MailRuLogin()
             {
               string authUrl = OAuthWeb.GetAuthorizationUrl("Mail.Ru", Url.Action("MailRuLoginResult", "Home", null, null, Request.Url.Host));
               return Redirect(authUrl);
             }
             </code>
             <code lang="VB">
             Public Function MailRuLogin() As ActionResult
               Dim authUrl As String = OAuthWeb.GetAuthorizationUrl("Mail.Ru", Url.Action("MailRuLoginResult", "Home", Nothing, Nothing, Request.Url.Host))
               Return Redirect(authUrl)
             End Function
             </code>
             <para>On a page add link to the <c>MailRuLogin</c> method.</para>
             <code lang="html">
             @Html.ActionLink("Log in with Mail.Ru", "MailRuLogin")
             </code>
             <para><b>NOTE:</b> For proper processing, you will need to download and put on your site a <b>receiver.html</b> file.</para>
             </example>
             <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.MailRuClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.MailRuClient"/>.
            </summary>
            <param name="clientId">The Client ID.</param>
            <param name="clientSecret">The Client Secret.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.MailRuClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <returns>
            <para>Returns an instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class, containing information about the user.</para>
            </returns>
            <exception cref="T:Nemiro.OAuth.ApiException"/>
        </member>
        <member name="P:Nemiro.OAuth.Clients.MailRuClient.ProviderName">
            <summary>
            Unique provider name: <b>Mail.Ru</b>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.MailRuClient.ReturnUrl">
            <summary>
            Return URL.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthClient">
            <summary>
            Represents base properties and method for OAuth 1.0 client.
            </summary>
            <remarks>
            <para>For more details, please visit <see href="http://tools.ietf.org/html/rfc5849"/>.</para>
            </remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthClient.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthClient"/> class.
            </summary>
            <param name="requestTokenUrl">The address for the request token.</param>
            <param name="authorizeUrl">The address for login.</param>
            <param name="accessTokenUrl">The address for the access token.</param>
            <param name="consumerKey">The application identifier.</param>
            <param name="consumerSecret">The application secret key.</param>
            <param name="signatureMethod">The name of hashing algorithm to calculate the signature: HMAC-SHA1 (default) or PLAINTEXT.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="requestTokenUrl"/> is null or empty.</exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthClient.GetSignatureBaseString(System.String,System.Uri,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets base string of the signature for current request.
            </summary>
            <remarks><para>For more details, please visit <see href="http://tools.ietf.org/html/rfc5849#section-3.4.1.1"/></para></remarks>
        </member>
        <member name="M:Nemiro.OAuth.OAuthClient.GetSignature(System.String,System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Gets signature for the current request.
            </summary>
            <param name="httpMethod">The HTTP method: <b>GET</b> or <b>POST</b>. Default is <b>POST</b>.</param>
            <param name="url">The request URI.</param>
            <param name="tokenSecret">The token secret.</param>
            <param name="parameters">The query parameters.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthClient.GetRequestToken">
            <summary>
            Gets the request token from the remote server.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthClient.GetAccessToken">
            <summary>
            Gets the access token from the remote server.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthClient.UpdateStamp">
            <summary>
            Updates the nonce and timestamp.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthClient.RequestTokenUrl">
            <summary>
            Gets or sets the address for the request token.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthClient.Authorization">
            <summary>
            Get the authorization parameters.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthClient.AuthorizationUrl">
            <summary>
            Gets the endpoint of the authorization.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthClient.RequestToken">
            <summary>
            Gets or sets the request token.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthManager">
            <summary>
            Represents helper class for management of OAuth clients.
            </summary>
            <example>
            <para>You can use this class to register clients in your project.</para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new FacebookClient
              (
                "1435890426686808", 
                "c6057dfae399beee9e8dc46a4182e8fd"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New FacebookClient _
              (
                "1435890426686808", 
                "c6057dfae399beee9e8dc46a4182e8fd"
              )
            )
            </code>
            </example>
        </member>
        <member name="M:Nemiro.OAuth.OAuthManager.#cctor">
            <summary>
            Initializes the <see cref="T:Nemiro.OAuth.OAuthManager"/>.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthManager.Timer_Elapsed(System.Object,System.EventArgs)">
            <summary>
            The method is called when the interval elapsed.
            </summary>
            <param name="sender">Instance of the object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthManager.AddRequet(System.String,Nemiro.OAuth.OAuthBase)">
            <summary>
            Adds the specified request to the collection.
            </summary>
            <param name="key">The unique request key.</param>
            <param name="client">The client instance.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthManager.RemoveRequet(System.String)">
            <summary>
            Removes the request from collection.
            </summary>
            <param name="key">The unique request key to remove..</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthManager.RegisterClient(Nemiro.OAuth.OAuthBase)">
            <summary>
            Registers the specified client in the application.
            </summary>
            <param name="client">The client instance.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <b>null</b> or <b>empty</b>.</exception>
            <exception cref="T:Nemiro.OAuth.DuplicateProviderException">If you attempt to register the already registered client.</exception>
            <example>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new GoogleClient
              (
                "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com", 
                "AeEbEGQqoKgOZb41JUVLvEJL"
              )
            );
            
            OAuthManager.RegisterClient
            (
              new FacebookClient
              (
                "1435890426686808", 
                "c6057dfae399beee9e8dc46a4182e8fd"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New GoogleClient _
              (
                "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com", 
                "AeEbEGQqoKgOZb41JUVLvEJL"
              )
            )
            
            OAuthManager.RegisterClient _
            (
              New FacebookClient _
              (
                "1435890426686808", 
                "c6057dfae399beee9e8dc46a4182e8fd"
              )
            )
            </code>
            </example>
        </member>
        <member name="M:Nemiro.OAuth.OAuthManager.RegisterClient(System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection,System.Object[])">
            <summary>
            Registers the specified client in the application.
            </summary>
            <param name="providerName">The provider name.</param>
            <param name="clientId">The application identifier obtained from the provider website.</param>
            <param name="clientSecret">The application secret key obtained from the provider website.</param>
            <param name="initArgs">Additional parameters to be passed to the constructor of the client class.</param>
            <param name="scope">List of scope that will be requested from the provider. Only for OAuth 2.0.</param>
            <param name="parameters">Additional parameters that will be transferred to the provider website.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="providerName"/>, <paramref name="clientId"/> or <paramref name="clientSecret"/> is <b>null</b> or <b>empty</b>.</exception>
            <exception cref="T:Nemiro.OAuth.UnknownProviderException">Provider not found by <paramref name="providerName"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <paramref name="providerName"/> not suppored <paramref name="scope"/>.</exception>
            <example>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              "google", 
              "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com", 
              "AeEbEGQqoKgOZb41JUVLvEJL"
            );
            
            OAuthManager.RegisterClient
            (
              "facebook"
              "1435890426686808", 
              "c6057dfae399beee9e8dc46a4182e8fd"
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              "google",
              "1058655871432-83b9micke7cll89jfmcno5nftha3e95o.apps.googleusercontent.com", 
              "AeEbEGQqoKgOZb41JUVLvEJL"
            )
            
            OAuthManager.RegisterClient _
            (
              "facebook",
              "1435890426686808", 
              "c6057dfae399beee9e8dc46a4182e8fd"
            )
            </code>
            </example>
        </member>
        <member name="P:Nemiro.OAuth.OAuthManager.AllClients">
            <summary>
            Gets the list of all clients.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthManager.Requets">
            <summary>
            Gets the list of active requests.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthManager.RegisteredClients">
            <summary>
            Gets the list of registered clients.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.SignatureMethods">
            <summary>
            Variants of the signature encryption.
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.SignatureMethods.HMACSHA1">
            <summary>
            HMAC-SHA1
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.SignatureMethods.RSASHA1">
            <summary>
            RSA-SHA1
            </summary>
        </member>
        <member name="F:Nemiro.OAuth.SignatureMethods.PLAINTEXT">
            <summary>
            PLAINTEXT
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthSignature">
            <summary>
            Represents the signature of the request. This is a helper class to simplify debugging.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthSignature.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthSignature"/> class.
            </summary>
            <param name="signatureMethod">The name of hashing algorithm to calculate the signature: HMAC-SHA1 (default) or PLAINTEXT.</param>
            <param name="key">The secret key for encryption.</param>
            <param name="baseString">Base string of the signature.</param>
            <exception cref="T:System.NotSupportedException">
            <para><paramref name="signatureMethod"/> is not suppored.</para>
            </exception>
        </member>
        <member name="M:Nemiro.OAuth.OAuthSignature.ToString">
            <summary>
            Returns the <see cref="P:Nemiro.OAuth.OAuthSignature.Value"/> of the current object.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthSignature.Key">
            <summary>
            Gets the secret key for encryption. 
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthSignature.SignatureMethod">
            <summary>
            Gets the name of hashing algorithm to calculate the signature: HMAC-SHA1 or PLAINTEXT.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthSignature.BaseString">
            <summary>
            Get base string of the signature.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthSignature.Value">
            <summary>
            Gets the signature.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.OAuthRequestToken">
            <summary>
            Represents the request token results.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.OAuthRequestToken.#ctor(Nemiro.OAuth.RequestResult,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.OAuthRequestToken"/> class.
            </summary>
            <param name="result">The request result.</param>
            <param name="authorizeUrl">The address of the authorization.</param>
            <param name="parameters">The query parameters. Will be used in the formation of the authorization address.</param>
        </member>
        <member name="M:Nemiro.OAuth.OAuthRequestToken.ToString">
            <summary>
            Returns the <see cref="P:Nemiro.OAuth.OAuthRequestToken.OAuthToken"/>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthRequestToken.OAuthToken">
            <summary>
            Gets the OAuth token.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthRequestToken.OAuthTokenSecret">
            <summary>
            Gets the token secret.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthRequestToken.OAuthCallbackConfirmed">
            <summary>
            The parameter is used to  differentiate from previous versions of the protocol.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.OAuthRequestToken.AuthorizationUrl">
            <summary>
            Gets the address of the authorization.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.TwitterClient">
            <summary>
            OAuth client for <b>Twitter</b>.
            </summary>
            <remarks>
            <h1>Register and Configure a Twitter Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Consumer ID</b> and <b>Consumer Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://apps.twitter.com">Twitter Application Management</see></b> and <b>Create a New App</b>.</para>
            <para>
            <img src="../img/twitter001.png" alt="Create a New App button"/>
            </para>
            <para>Fill out the form and click the <b>Create your Twitter application</b>.</para>
            <para>For web project, set a <b>Callback URL</b>.</para>
            <para>
            <img src="../img/twitter002.png" alt="Create a New App form"/>
            </para>
            <para>
            Open the application page and click to the <b>API Keys</b>.
            </para>
            <para>
            <img src="../img/twitter003.png" alt="API Keys link"/>
            </para>
            <para>
            You can see <b>API Key</b> and <b>API secret</b>, this is <b>Consumer Key</b> and <b>Consumer Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/>.
            </para>
            <para>
            <img src="../img/twitter004.png" alt="Client ID and Client Secret"/>
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new TwitterClient
              (
                "cXzSHLUy57C4gTBgMGRDuqQtr", 
                "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New TwitterClient _
              (
                "cXzSHLUy57C4gTBgMGRDuqQtr", 
                "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="https://dev.twitter.com/docs">Twitter Developers Documentation</see>.
            </para>
            </remarks>
            <example>
            <h2>Console Applications</h2>
            <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/> in <b>Console Applications</b>.</para>
            <para>For desktop applications, the user will need to manually enter authorization code.</para>
            <code lang="C#">
            class Program
            {
              static void Main(string[] args)
              {
                try
                {
                  var twitter = new TwitterClient
                  (
                    "cXzSHLUy57C4gTBgMGRDuqQtr",
                    "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
                  );
                  
                  // open the login page in browser
                  System.Diagnostics.Process.Start(twitter.AuthorizationUrl);
                  
                  // waiting of entering the access code
                  string code = "";
                  while (String.IsNullOrEmpty(code))
                  {
                    Console.WriteLine("Enter access code:");
                    code = Console.ReadLine();
                  }
            
                  Console.WriteLine();
            
                  // set authorization code
                  twitter.AuthorizationCode = code;
                  // get user info
                  var user = twitter.GetUserInfo();
                  Console.WriteLine("User ID: {0}", user.UserId);
                  Console.WriteLine("Name:    {0}", user.DisplayName);
                }
                catch (Exception ex)
                {
                  Console.WriteLine(ex.Message);
                }
                Console.ReadKey();
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            Imports Nemiro.OAuth.Clients
            
            Module Module1
            
              Sub Main()
                Try
                  Dim twitter As New TwitterClient _
                  (
                    "cXzSHLUy57C4gTBgMGRDuqQtr",
                    "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
                  )
                  ' open the login page in browser
                  System.Diagnostics.Process.Start(twitter.AuthorizationUrl)
            
                  ' waiting of entering the access code
                  Dim code As String = ""
                  Do While String.IsNullOrEmpty(code)
                    Console.WriteLine("Enter access code:")
                    code = Console.ReadLine()
                  Loop
            
                  ' set authorization code
                  twitter.AuthorizationCode = code
            
                  ' get user info
                  Dim user As UserInfo = twitter.GetUserInfo()
                  Console.WriteLine("User ID: {0}", user.UserId)
                  Console.WriteLine("Name:    {0}", user.DisplayName)
                Catch ex As Exception
                  Console.WriteLine(ex.Message)
                End Try
                Console.ReadKey()
              End Sub
            
            End Module
            </code>
            <para>Result of the program is shown in the images below.</para>
            <para><img src="../img/twitter005.png" alt="Log in with Twitter"/></para>
            <para><img src="../img/twitter006.png" alt="Access code"/></para>
            <para><img src="../img/twitter007.png" alt="User info"/></para>
            <h2>ASP .NET WebForms</h2>
            <para>In a web projects you can use the <see cref="T:Nemiro.OAuth.OAuthManager"/> and <see cref="T:Nemiro.OAuth.OAuthWeb"/>.</para>
            <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/> in <b>ASP .NET WebForms</b>.</para>
            <para>To test the example, create a new <b>ASP .NET WebForms</b> (empty) project. Add <b>Global.asax</b>.</para>
            <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/>.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Web;
            using System.Web.Security;
            using System.Web.SessionState;
            using Nemiro.OAuth;
            using Nemiro.OAuth.Clients;
            
            namespace Test.CSharp.AspWebForms
            {
              public class Global : System.Web.HttpApplication
              {
                protected void Application_Start(object sender, EventArgs e)
                {
                  OAuthManager.RegisterClient
                  (
                    new TwitterClient
                    (
                      "cXzSHLUy57C4gTBgMGRDuqQtr",
                      "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
                    )
                  );
                }
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            Imports Nemiro.OAuth.Clients
            
            Public Class Global_asax
              Inherits System.Web.HttpApplication
            
              Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
                OAuthManager.RegisterClient _
                (
                  New TwitterClient _
                  (
                    "cXzSHLUy57C4gTBgMGRDuqQtr",
                    "3SSldiSb5H4XeEMOIIF4osPWxOy19jrveDcPHaWtHDQqgDYP9P"
                  )
                )
              End Sub
            
            End Class
            </code>
            <para>Add <b>ExternalLoginResult.aspx</b>.</para>
            <code lang="html">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="ExternalLoginResult.aspx.cs" Inherits="Test.CSharp.AspWebForms.ExternalLoginResult" %gt;</code>
            <para>And add the following code.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Web;
            using System.Web.UI;
            using System.Web.UI.WebControls;
            using Nemiro.OAuth;
            
            namespace Test.CSharp.AspWebForms
            {
              public partial class ExternalLoginResult : System.Web.UI.Page
              {
                protected void Page_Load(object sender, EventArgs e)
                {
                  Response.Write("&lt;pre&gt;");
                  var result = OAuthWeb.VerifyAuthorization();
                  if (result.IsSuccessfully)
                  {
                    var user = result.UserInfo;
                    Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId));
                    Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName));
                  }
                  else
                  {
                    Response.Write(result.ErrorInfo.Message);
                  }
                  Response.Write("&lt;/pre&gt;");
                }
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            
            Public Class ExternalLoginResult
              Inherits System.Web.UI.Page
            
              Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
                Response.Write("&lt;pre&gt;")
                Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
                If result.IsSuccessfully Then
                  Dim user As UserInfo = result.UserInfo
                  Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId))
                  Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName))
                Else
                  Response.Write(result.ErrorInfo.Message)
                End If
                Response.Write("&lt;/pre&gt;")
              End Sub
            
            End Class
            </code>
            <para>Add <b>Default.aspx</b> and insert one <b>LinkButton</b> to the page.</para>
            <code lang="html">
            &lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="Test.CSharp.AspWebForms.Default" %&gt;
            
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
            
            &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
            &lt;head runat="server"&gt;
                &lt;title&gt;&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;form id="form1" runat="server"&gt;
                &lt;div&gt;
                &lt;asp:LinkButton ID="lnkTwitter" runat="server" 
                    Text="Log in with Twitter" onclick="lnkTwitter_Click" /&gt;
                &lt;/div&gt;
                &lt;/form&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            </code>
            <para>Add a handler for a click on the link.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Web;
            using System.Web.UI;
            using System.Web.UI.WebControls;
            using Nemiro.OAuth;
            
            namespace Test.CSharp.AspWebForms
            {
              public partial class Default : System.Web.UI.Page
              {
                protected void lnkTwitter_Click(object sender, EventArgs e)
                {
                  OAuthWeb.RedirectToAuthorization("Twitter", new Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri);
                }
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            
            Public Class _Default
              Inherits System.Web.UI.Page
            
              Protected Sub lnkTwitter_Click(sender As Object, e As EventArgs) Handles lnkTwitter.Click
                OAuthWeb.RedirectToAuthorization("Twitter", New Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri)
              End Sub
            
            End Class
            </code>
            <para><b>NOTE:</b> Do not forget to adjust the <b>Callback URL</b> in the <b>Twitter Application Settings</b>.</para>
            </example>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.TwitterClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.TwitterClient"/>.
            </summary>
            <param name="consumerKey">The API Key obtained from the <see href="https://apps.twitter.com">Twitter Application Management</see>.</param>
            <param name="consumerSecret">The API Secret obtained from the <see href="https://apps.twitter.com">Twitter Application Management</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.TwitterClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.TwitterClient.ProviderName">
            <summary>
            Unique provider name: <b>Twitter</b>.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.VkontakteClient">
             <summary>
             OAuth client for <b>VK</b> (<b>VKontakte</b>).
             </summary>
             <remarks>
             <para>VK (VKontakte) is "Russian Facebook". :-)</para>
             <h1>Register and Configure a VKontakte Application</h1>
             <list type="table">
             <item>
             <term><img src="../img/warning.png" alt="(!)" title=""/></term>
             <term>
             <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
             If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
             If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
             </term>
             </item>
             </list>
             <para>Open the <b><see href="http://vk.com/dev">VK App development</see></b> and click <b>Create an Application</b>.</para>
             <para>
             <img src="../img/vk001.png" alt="Create an Application button"/>
             </para>
             <para>Specify the application name and type, and click the <b>Connect Application</b>.</para>
             <para>
             <img src="../img/vk002.png" alt="Creating an application"/>
             </para>
             <para>Confirm by SMS.</para>
             <para>
             <img src="../img/vk003.png" alt="Confirmation"/>
             </para>
             <para>
             In the <b>Application Settings</b> you can found <b>Application ID</b> and <b>Secure key</b>, this is <b>Client ID</b> and <b>Client Secret</b>.
             Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/> class.
             </para>
             <para><b>NOTE:</b> Change application status to <b>Application ON and visible to all</b>.</para>
             <para>
             <img src="../img/vk004.png" alt="Application settings"/>
             </para>
             <code lang="C#">
             OAuthManager.RegisterClient
             (
               new VkontakteClient
               (
                 "4457505", 
                 "wW5lFMVbsw0XwYFgCGG0"
               )
             );
             </code>
             <code lang="VB">
             OAuthManager.RegisterClient _
             (
               New VkontakteClient _
               (
                 "4457505", 
                 "wW5lFMVbsw0XwYFgCGG0"
               )
             )
             </code>
             <para>For web projects, enable <b>Open API</b>, set <b>Site address</b> and configure <b>Base domain</b> in the <b>Open API</b> section.</para>
             <para>
             <img src="../img/vk005.png" alt="Base domains"/>
             </para>
             <para>
             For more details, please see <see href="http://vk.com/dev">VK App development</see>.
             </para>
             </remarks>
             <example>
             <h2>Windows Forms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/> in desktop applications.</para>
             <para>To test the example, create a new <b>Windows Forms</b> project with two forms. Insert a <c>Button</c> to the <c>Form1</c>.</para>
             <code lang="C#">
             public Form1()
             {
               InitializeComponent();
               button1.Click += new EventHandler(button1_Click);
             }
             
             private void Form1_Load(object sender, EventArgs e)
             {
               // vk(ontakte) client registration
               OAuthManager.RegisterClient
               (
                 new VkontakteClient
                 (
                   // application id
                   "4457505", 
                   // secure secret
                   "wW5lFMVbsw0XwYFgCGG0"
                 ) 
                 { 
                   // display=popup - to open a popup window
                   Parameters = new NameValueCollection { { "display", "popup" } } 
                 }
               );
             }
             
             private void button1_Click(object sender, EventArgs e)
             {
               var frm = new Form2();
               frm.ShowDialog();
             }
             </code>
             <code lang="VB">
             Private Sub Form1_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               ' vk(ontakte) client registration
               OAuthManager.RegisterClient _
               (
                 New VkontakteClient _
                 (
                   "4457505",
                   "wW5lFMVbsw0XwYFgCGG0"
                 ) With _
                 {
                   .Parameters = New NameValueCollection() From {{"display", "popup"}}
                 }
               )
             End Sub
             
             Private Sub Button1_Click(sender As System.Object, e As System.EventArgs) Handles Button1.Click
               Call New Form2().ShowDialog()
             End Sub
             </code>
             <para>Add a <c>WebBrowser</c> to the <c>Form2</c>.</para>
             <code lang="C#">
             public Form2()
             {
               InitializeComponent();
               webBrowser1.DocumentCompleted += new System.Windows.Forms.WebBrowserDocumentCompletedEventHandler(webBrowser1_DocumentCompleted);
               webBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("vk"));
             }
             
             private void webBrowser1_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
             {
               // waiting for results
               if (e.Url.Query.IndexOf("code=") != -1 || e.Url.Fragment.IndexOf("code=") != -1 || e.Url.Query.IndexOf("oauth_verifier=") != -1)
               {
                 // is the result, verify
                 var result = OAuthWeb.VerifyAuthorization(e.Url.ToString());
                 if (result.IsSuccessfully)
                 {
                   // show user info
                   MessageBox.Show
                   (
                     String.Format
                     (
                       "User ID: {0}\r\nUsername: {1}\r\nDisplay Name: {2}\r\nE-Mail: {3}", 
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       result.UserInfo.DisplayName ?? result.UserInfo.FullName,
                       result.UserInfo.Email
                     ), 
                     "Successfully", 
                     MessageBoxButtons.OK, 
                     MessageBoxIcon.Information
                   );
                 }
                 else
                 {
                   // show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                 }
                 this.Close();
               }
             }
             </code>
             <code lang="VB">
             Private Sub Form2_Load(sender As System.Object, e As System.EventArgs) Handles MyBase.Load
               WebBrowser1.Navigate(OAuthWeb.GetAuthorizationUrl("vk"))
             End Sub
            
             Private Sub WebBrowser1_DocumentCompleted(sender As System.Object, e As System.Windows.Forms.WebBrowserDocumentCompletedEventArgs) Handles WebBrowser1.DocumentCompleted
               ' waiting for results
               If Not e.Url.Query.IndexOf("code=") = -1 OrElse Not e.Url.Fragment.IndexOf("code=") = -1 OrElse Not e.Url.Query.IndexOf("oauth_verifier=") = -1 Then
                 ' is the result, verify
                 Dim result = OAuthWeb.VerifyAuthorization(e.Url.ToString())
                 If result.IsSuccessfully Then
                   ' show user info
                   MessageBox.Show _
                   (
                     String.Format _
                     (
                       "User ID: {0}{4}Username: {1}{4}Display Name: {2}{4}E-Mail: {3}",
                       result.UserInfo.UserId,
                       result.UserInfo.UserName,
                       If(Not String.IsNullOrEmpty(result.UserInfo.DisplayName), result.UserInfo.DisplayName, result.UserInfo.FullName),
                       result.UserInfo.Email,
                       vbNewLine
                     ),
                     "Successfully",
                     MessageBoxButtons.OK,
                     MessageBoxIcon.Information
                   )
                 Else
                   ' show error message
                   MessageBox.Show(result.ErrorInfo.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
                 End If
                 Me.Close()
               End If
             End Sub
             </code>
             <para>Result of the program is shown in the images below.</para>
             <para><img src="../img/vk006.png" alt="Log in with VK(ontakte)"/></para>
             <para><img src="../img/vk007.png" alt="VK User Info"/></para>
             <h2>ASP .NET MVC</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/> in <b>ASP .NET MVC Application</b>.</para>
             <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>.</para>
             <code lang="C#">
             protected void Application_Start()
             {
               OAuthManager.RegisterClient
               (
                 new VkontakteClient
                 (
                   "4457505", 
                   "wW5lFMVbsw0XwYFgCGG0"
                 )
               );
             }
             </code>
             <code lang="VB">
             Sub Application_Start()
               OAuthManager.RegisterClient _
               (
                 New VkontakteClient _
                 (
                   "4457505", 
                   "wW5lFMVbsw0XwYFgCGG0"  
                 )
               )
             End Sub
             </code>
             <para>The <c>VkontakteLoginResult</c> method will handle authorization result.</para>
             <code lang="C#">
             public ActionResult VkontakteLoginResult()
             {
               var result = OAuthWeb.VerifyAuthorization();
               if (result.IsSuccessfully)
               {
                 var user = result.UserInfo;    
                 // NOTE: For StringBuilder import the System.Text
                 StringBuilder r = new StringBuilder();
                 r.AppendFormat("User ID: {0}\r\n", user.UserId);
                 r.AppendFormat("Name:    {0}\r\n", user.DisplayName);
                 return new ContentResult { Content = r.ToString(), ContentType = "text/plain" }; 
               }
               
               return new ContentResult 
               { 
                 Content = "Error: " + result.ErrorInfo.Message, 
                 ContentType = "text/plain" 
               };
             }
             </code>
             <code lang="VB">
             Public Function VkontakteLoginResult() As ActionResult
               Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
               If result.IsSuccessfully Then 
                 Dim user As UserInfo = result.UserInfo   
                 ' NOTE: For StringBuilder import the System.Text
                 Dim r As New StringBuilder()
                 r.AppendFormat("User ID: {0}", user.UserId)
                 r.AppendLine()
                 r.AppendFormat("Name:    {0}", user.DisplayName)
                 Return New ContentResult With { .Content = r.ToString(), .ContentType = "text/plain" } 
               End If
               
               Return New ContentResult With _
               { 
                 .Content = "Error: " + result.ErrorInfo.Message, 
                 .ContentType = "text/plain" 
               }
             End Function
             </code>
             <para>Add action method for redirection to the <b>Vkontakte</b>.</para>
             <code lang="C#">
             public ActionResult VkontakteLogin()
             {
               string authUrl = OAuthWeb.GetAuthorizationUrl("vk", Url.Action("VkontakteLoginResult", "Home", null, null, Request.Url.Host));
               return Redirect(authUrl);
             }
             </code>
             <code lang="VB">
             Public Function VkontakteLogin() As ActionResult
               Dim authUrl As String = OAuthWeb.GetAuthorizationUrl("vk", Url.Action("VkontakteLoginResult", "Home", Nothing, Nothing, Request.Url.Host))
               Return Redirect(authUrl)
             End Function
             </code>
             <para>On a page add link to the <c>VkontakteLogin</c> method.</para>
             <code lang="html">
             @Html.ActionLink("Log in with VK(ontakte)", "VkontakteLogin")
             </code>
             <h2>ASP .NET WebForms</h2>
             <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/> in <b>ASP .NET WebForms</b>.</para>
             <para>To test the example, create a new <b>ASP .NET WebForms</b> (empty) project. Add <b>Global.asax</b>.</para>
             <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.Security;
             using System.Web.SessionState;
             using Nemiro.OAuth;
             using Nemiro.OAuth.Clients;
             
             namespace Test.CSharp.AspWebForms
             {
               public class Global : System.Web.HttpApplication
               {
                 protected void Application_Start(object sender, EventArgs e)
                 {
                   OAuthManager.RegisterClient
                   (
                     new VkontakteClient
                     (
                       "4457505", 
                       "wW5lFMVbsw0XwYFgCGG0"
                     )
                   );
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             Imports Nemiro.OAuth.Clients
             
             Public Class Global_asax
               Inherits System.Web.HttpApplication
             
               Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
                 OAuthManager.RegisterClient _
                 (
                   New VkontakteClient _
                   (
                     "4457505", 
                     "wW5lFMVbsw0XwYFgCGG0"
                   )
                 )
               End Sub
             
             End Class
             </code>
             <para>Add <b>ExternalLoginResult.aspx</b>.</para>
             <code lang="html">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="ExternalLoginResult.aspx.cs" Inherits="Test.CSharp.AspWebForms.ExternalLoginResult" %gt;</code>
             <para>And add the following code.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.UI;
             using System.Web.UI.WebControls;
             using Nemiro.OAuth;
             
             namespace Test.CSharp.AspWebForms
             {
               public partial class ExternalLoginResult : System.Web.UI.Page
               {
                 protected void Page_Load(object sender, EventArgs e)
                 {
                   Response.Write("&lt;pre&gt;");
                   var result = OAuthWeb.VerifyAuthorization();
                   if (result.IsSuccessfully)
                   {
                     var user = result.UserInfo;
                     Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId));
                     Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName));
                   }
                   else
                   {
                     Response.Write(result.ErrorInfo.Message);
                   }
                   Response.Write("&lt;/pre&gt;");
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             
             Public Class ExternalLoginResult
               Inherits System.Web.UI.Page
             
               Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
                 Response.Write("&lt;pre&gt;")
                 Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
                 If result.IsSuccessfully Then
                   Dim user As UserInfo = result.UserInfo
                   Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId))
                   Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName))
                 Else
                   Response.Write(result.ErrorInfo.Message)
                 End If
                 Response.Write("&lt;/pre&gt;")
               End Sub
             
             End Class
             </code>
             <para>Add <b>Default.aspx</b> and insert one <b>LinkButton</b> to the page.</para>
             <code lang="html">
             &lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="Test.CSharp.AspWebForms.Default" %&gt;
             
             &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
             
             &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
             &lt;head runat="server"&gt;
                 &lt;title&gt;&lt;/title&gt;
             &lt;/head&gt;
             &lt;body&gt;
                 &lt;form id="form1" runat="server"&gt;
                 &lt;div&gt;
                 &lt;asp:LinkButton ID="lnkVkontakte" runat="server" 
                     Text="Log in with VK(ontakte)" onclick="lnkVkontakte_Click" /&gt;
                 &lt;/div&gt;
                 &lt;/form&gt;
             &lt;/body&gt;
             &lt;/html&gt;
             </code>
             <para>Add a handler for a click on the link.</para>
             <code lang="C#">
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Web;
             using System.Web.UI;
             using System.Web.UI.WebControls;
             using Nemiro.OAuth;
             
             namespace Test.CSharp.AspWebForms
             {
               public partial class Default : System.Web.UI.Page
               {
                 protected void lnkVkontakte_Click(object sender, EventArgs e)
                 {
                   OAuthWeb.RedirectToAuthorization("vk", new Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri);
                 }
               }
             }
             </code>
             <code lang="VB">
             Imports Nemiro.OAuth
             
             Public Class _Default
               Inherits System.Web.UI.Page
             
               Protected Sub lnkVkontakte_Click(sender As Object, e As EventArgs) Handles lnkVkontakte.Click
                 OAuthWeb.RedirectToAuthorization("vk", New Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri)
               End Sub
             
             End Class
             </code>
             </example>
             <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
             <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.VkontakteClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>.
            </summary>
            <param name="clientId">The Application ID obtained from the <see href="http://vk.com/dev">VK App development</see>.</param>
            <param name="clientSecret">The Secure Key obtained from the <see href="http://vk.com/dev">VK App development</see>.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.VkontakteClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
            <exception cref="T:Nemiro.OAuth.ApiException"/>
        </member>
        <member name="P:Nemiro.OAuth.Clients.VkontakteClient.ProviderName">
            <summary>
            Unique provider name: <b>VK</b>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.VkontakteClient.ReturnUrl">
            <summary>
            Return URL.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.Clients.YandexClient">
            <summary>
            OAuth client for <b>Yandex</b>.
            </summary>
            <remarks>
            <para><b>Yandex</b> is a popular search engine in Russia and CIS.</para>
            <h1>Register and Configure a Yandex Application</h1>
            <list type="table">
            <item>
            <term><img src="../img/warning.png" alt="(!)" title=""/></term>
            <term>
            <b>Web Management Interface may change over time. Applications registration shown below may differ.</b><br/>
            If the interface is changed, you need to register the application and get <b>Client ID</b> and <b>Client Secret</b>. For web projects, configure <b>return URLs</b>.<br/>
            If you have any problems with this, please <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues">visit issues</see>. If you do not find a solution to your problem, you can <see href="https://github.com/alekseynemiro/nemiro.oauth.dll/issues/new">create a new question</see>.
            </term>
            </item>
            </list>
            <para>Open the <b><see href="https://oauth.yandex.com/client/new">register new application</see></b> page, fill out the form and click <b>Save</b>.</para>
            <para><b>NOTE:</b> Russian language is available on the <b>yandex<font color="red">.ru</font></b></para>
            <para>Specify the application name and set permissions.</para>
            <para>
            To access a users profile, select <b>Yandex.Username</b>: Date of birth; Email address; User name, surname and gender. 
            This minimum permissions that are required to work.
            </para>
            <para>For web project, set a <b>Callback URI</b>.</para>
            <para><b>NOTE: For desktop applications set Callback URI to <b>https://oauth.yandex.ru/verification_code</b>.</b></para>
            <para>
            <img src="../img/yandex001.png" alt="Register new application"/>
            </para>
            <para>
            In the next step you will see an <b>Application ID</b> and <b>Application password</b>, this is <b>Client ID</b> and <b>Client Secret</b>.
            Use this for creating an instance of the <see cref="T:Nemiro.OAuth.Clients.YandexClient"/>.
            </para>
            <para>
            <img src="../img/yandex002.png" alt="Client ID and Client Secret"/>
            </para>
            <code lang="C#">
            OAuthManager.RegisterClient
            (
              new YandexClient
              (
                "0ee5f0bf2cd141a1b194a2b71b0332ce", 
                "59d76f7c09b54ad38e6b15f792da7a9a"
              )
            );
            </code>
            <code lang="VB">
            OAuthManager.RegisterClient _
            (
              New YandexClient _
              (
                "0ee5f0bf2cd141a1b194a2b71b0332ce", 
                "59d76f7c09b54ad38e6b15f792da7a9a"
              )
            )
            </code>
            <para>
            For more details, please visit <see href="http://api.yandex.com/oauth/doc/dg/concepts/About.xml">Yandex OAuth Documentation</see>.
            </para>
            </remarks>
            <example>
            <h2>Console Applications</h2>
            <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.YandexClient"/> in <b>Console Applications</b>.</para>
            <para>For desktop applications, the user will need to manually enter authorization code.</para>
            <code lang="C#">
            class Program
            {
              static void Main(string[] args)
              {
                try
                {
                  var yandex = new YandexClient
                  (
                    "0ee5f0bf2cd141a1b194a2b71b0332ce",
                    "59d76f7c09b54ad38e6b15f792da7a9a"
                  );
                  
                  // open the login page in browser
                  System.Diagnostics.Process.Start(yandex.AuthorizationUrl);
                  
                  // waiting of entering the access code
                  string code = "";
                  while (String.IsNullOrEmpty(code))
                  {
                    Console.WriteLine("Enter access code:");
                    code = Console.ReadLine();
                  }
            
                  Console.WriteLine();
            
                  // set authorization code
                  yandex.AuthorizationCode = code;
                  // get user info
                  var user = yandex.GetUserInfo();
                  Console.WriteLine("User ID:   {0}", user.UserId);
                  Console.WriteLine("E-Mail:    {0}", user.Email);
                  Console.WriteLine("Name:      {0}", user.DisplayName);
                  Console.WriteLine("Birthday:  {0}", user.Birthday);
                  Console.WriteLine("Sex:       {0}", user.Sex);
                }
                catch (Exception ex)
                {
                  Console.WriteLine(ex.Message);
                }
                Console.ReadKey();
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            Imports Nemiro.OAuth.Clients
            
            Module Module1
            
              Sub Main()
                Try
                  Dim yandex As New YandexClient _
                  (
                    "0ee5f0bf2cd141a1b194a2b71b0332ce",
                    "59d76f7c09b54ad38e6b15f792da7a9a"
                  )
                  ' open the login page in browser
                  System.Diagnostics.Process.Start(yandex.AuthorizationUrl)
            
                  ' waiting of entering the access code
                  Dim code As String = ""
                  Do While String.IsNullOrEmpty(code)
                    Console.WriteLine("Enter access code:")
                    code = Console.ReadLine()
                  Loop
            
                  ' set authorization code
                  yandex.AuthorizationCode = code
            
                  ' get user info
                  Dim user As UserInfo = yandex.GetUserInfo()
                  Console.WriteLine("User ID:   {0}", user.UserId)
                  Console.WriteLine("E-Mail:    {0}", user.Email)
                  Console.WriteLine("Name:      {0}", user.DisplayName)
                  Console.WriteLine("Birthday:  {0}", user.Birthday)
                  Console.WriteLine("Sex:       {0}", user.Sex)
                Catch ex As Exception
                  Console.WriteLine(ex.Message)
                End Try
                Console.ReadKey()
              End Sub
            
            End Module
            </code>
            <para>Result of the program is shown in the images below.</para>
            <para><img src="../img/yandex003.png" alt="Log in with Yandex"/></para>
            <para><img src="../img/yandex004.png" alt="Access code"/></para>
            <para><img src="../img/yandex005.png" alt="User info"/></para>
            <h2>ASP .NET WebForms</h2>
            <para>In a web projects you can use the <see cref="T:Nemiro.OAuth.OAuthManager"/> and <see cref="T:Nemiro.OAuth.OAuthWeb"/>.</para>
            <para>The following example shows how to use the <see cref="T:Nemiro.OAuth.Clients.YandexClient"/> in <b>ASP .NET WebForms</b>.</para>
            <para>To test the example, create a new <b>ASP .NET WebForms</b> (empty) project. Add <b>Global.asax</b>.</para>
            <para>In the <c>Application_Start</c> event handler (<c>Global.asax</c> file) is registered the <see cref="T:Nemiro.OAuth.Clients.YandexClient"/>.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Web;
            using System.Web.Security;
            using System.Web.SessionState;
            using Nemiro.OAuth;
            using Nemiro.OAuth.Clients;
            
            namespace Test.CSharp.AspWebForms
            {
              public class Global : System.Web.HttpApplication
              {
                protected void Application_Start(object sender, EventArgs e)
                {
                  OAuthManager.RegisterClient
                  (
                    new YandexClient
                    (
                      "0ee5f0bf2cd141a1b194a2b71b0332ce",
                      "59d76f7c09b54ad38e6b15f792da7a9a"
                    )
                  );
                }
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            Imports Nemiro.OAuth.Clients
            
            Public Class Global_asax
              Inherits System.Web.HttpApplication
            
              Sub Application_Start(ByVal sender As Object, ByVal e As EventArgs)
                OAuthManager.RegisterClient _
                (
                  New YandexClient _
                  (
                    "0ee5f0bf2cd141a1b194a2b71b0332ce",
                    "59d76f7c09b54ad38e6b15f792da7a9a"
                  )
                )
              End Sub
            
            End Class
            </code>
            <para>Add <b>ExternalLoginResult.aspx</b>.</para>
            <code lang="html">&lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="ExternalLoginResult.aspx.cs" Inherits="Test.CSharp.AspWebForms.ExternalLoginResult" %gt;</code>
            <para>And add the following code.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Web;
            using System.Web.UI;
            using System.Web.UI.WebControls;
            using Nemiro.OAuth;
            
            namespace Test.CSharp.AspWebForms
            {
              public partial class ExternalLoginResult : System.Web.UI.Page
              {
                protected void Page_Load(object sender, EventArgs e)
                {
                  Response.Write("&lt;pre&gt;");
                  var result = OAuthWeb.VerifyAuthorization();
                  if (result.IsSuccessfully)
                  {
                    var user = result.UserInfo;
                    Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId));
                    Response.Write(String.Format("E-Mail:  {0}&lt;br /&gt;", user.Email));
                    Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName));
                  }
                  else
                  {
                    Response.Write(result.ErrorInfo.Message);
                  }
                  Response.Write("&lt;/pre&gt;");
                }
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            
            Public Class ExternalLoginResult
              Inherits System.Web.UI.Page
            
              Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
                Response.Write("&lt;pre&gt;")
                Dim result As AuthorizationResult = OAuthWeb.VerifyAuthorization()
                If result.IsSuccessfully Then
                  Dim user As UserInfo = result.UserInfo
                  Response.Write(String.Format("User ID: {0}&lt;br /&gt;", user.UserId))
                  Response.Write(String.Format("E-Mail:  {0}&lt;br /&gt;", user.Email))
                  Response.Write(String.Format("Name:    {0}&lt;br /&gt;", user.DisplayName))
                Else
                  Response.Write(result.ErrorInfo.Message)
                End If
                Response.Write("&lt;/pre&gt;")
              End Sub
            
            End Class
            </code>
            <para>Add <b>Default.aspx</b> and insert one <b>LinkButton</b> to the page.</para>
            <code lang="html">
            &lt;%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="Test.CSharp.AspWebForms.Default" %&gt;
            
            &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
            
            &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
            &lt;head runat="server"&gt;
                &lt;title&gt;&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
                &lt;form id="form1" runat="server"&gt;
                &lt;div&gt;
                &lt;asp:LinkButton ID="lnkYandex" runat="server" 
                    Text="Log in with Yandex" onclick="lnkYandex_Click" /&gt;
                &lt;/div&gt;
                &lt;/form&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            </code>
            <para>Add a handler for a click on the link.</para>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Web;
            using System.Web.UI;
            using System.Web.UI.WebControls;
            using Nemiro.OAuth;
            
            namespace Test.CSharp.AspWebForms
            {
              public partial class Default : System.Web.UI.Page
              {
                protected void lnkYandex_Click(object sender, EventArgs e)
                {
                  OAuthWeb.RedirectToAuthorization("Yandex", new Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri);
                }
              }
            }
            </code>
            <code lang="VB">
            Imports Nemiro.OAuth
            
            Public Class _Default
              Inherits System.Web.UI.Page
            
              Protected Sub lnkYandex_Click(sender As Object, e As EventArgs) Handles lnkYandex.Click
                OAuthWeb.RedirectToAuthorization("Yandex", New Uri(Request.Url, "ExternalLoginResult.aspx").AbsoluteUri)
              End Sub
            
            End Class
            </code>
            <para><b>NOTE:</b> Do not forget to adjust the <b>Callback URI</b> in the <b>Yandex Application Settings</b>.</para>
            </example>
            <seealso cref="T:Nemiro.OAuth.Clients.AmazonClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.DropboxClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FacebookClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.FoursquareClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GitHubClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.GoogleClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LinkedInClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.LiveClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.MailRuClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.OdnoklassnikiClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.SoundCloudClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.TwitterClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.VkontakteClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YahooClient"/>
            <seealso cref="T:Nemiro.OAuth.Clients.YandexClient"/>
        </member>
        <member name="M:Nemiro.OAuth.Clients.YandexClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.Clients.YandexClient"/>.
            </summary>
            <param name="clientId">The Application ID.</param>
            <param name="clientSecret">The Application Password.</param>
        </member>
        <member name="M:Nemiro.OAuth.Clients.YandexClient.GetUserInfo">
            <summary>
            Gets the user details.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.YandexClient.ProviderName">
            <summary>
            Unique provider name: <b>Yandex</b>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.Clients.YandexClient.ReturnUrl">
            <summary>
            Return URL.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.UserInfo">
            <summary>
            Represents the user profile info.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.UserInfo.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},Nemiro.OAuth.ApiDataMapping)">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.UserInfo"/> class.
            </summary>
            <param name="source">The data source.</param>
            <param name="mapping">The mapping rules.</param>
        </member>
        <member name="M:Nemiro.OAuth.UserInfo.ToString">
            <summary>
            Returns the <see cref="P:Nemiro.OAuth.UserInfo.UserName"/> or <see cref="P:Nemiro.OAuth.UserInfo.UserId"/>.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Items">
            <summary>
            Gets or sets a collection containing the API request results.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.UserId">
            <summary>
            Gets or sets the user ID.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.UserName">
            <summary>
            Gets or sets the username.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.FirstName">
            <summary>
            Gets or sets the first name of the user.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.LastName">
            <summary>
            Gets or sets the last name of the user.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.DisplayName">
            <summary>
            Gets or sets the display name of the user.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Email">
            <summary>
            Gets or sets user email address.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Phone">
            <summary>
            Gets or sets user phone.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Birthday">
            <summary>
            Gets or sets user birthday.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Url">
            <summary>
            Gets or sets user url.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Userpic">
            <summary>
            Gets or sets user image url.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.Sex">
            <summary>
            Gets or sets gender of the user.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.UserInfo.FullName">
            <summary>
            Gets the first and last name.
            </summary>
        </member>
        <member name="T:Nemiro.OAuth.ApiDataMapping">
            <summary>
            Represents data mapping collection for API results.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiDataMapping"/> class.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMapping.Add(System.String,System.String,System.Type,System.String,Nemiro.OAuth.CustomParse)">
            <summary>
            Adds the specified data mapping to the collection.
            </summary>
            <param name="sourceName">The key name in the data source.</param>
            <param name="destinationName">The property name in the destination object.</param>
            <param name="type">The data type.</param>
            <param name="format">The data format. For example: "dd.MM.yyyy" for dates, or: "00" for numerics, etc.</param>
            <param name="parse">Custom parser of the data.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMapping.Add(System.String,System.String)">
            <summary>
            Adds the specified data mapping to the collection.
            </summary>
            <param name="sourceName">The key name in the data source.</param>
            <param name="destinationName">The property name in the destination object.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMapping.Add(System.String,System.String,System.Type)">
            <summary>
            Adds the specified data mapping to the collection.
            </summary>
            <param name="sourceName">The key name in the data source.</param>
            <param name="destinationName">The property name in the destination object.</param>
            <param name="type">The data type.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMapping.Add(System.String,System.String,System.Type,System.String)">
            <summary>
            Adds the specified data mapping to the collection.
            </summary>
            <param name="sourceName">The key name in the data source.</param>
            <param name="destinationName">The property name in the destination object.</param>
            <param name="type">The data type.</param>
            <param name="format">The data format. For example: "dd.MM.yyyy" for dates, or: "00" for numerics, etc.</param>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMapping.Add(System.String,System.String,Nemiro.OAuth.CustomParse)">
            <summary>
            Adds the specified data mapping to the collection.
            </summary>
            <param name="sourceName">The key name in the data source.</param>
            <param name="destinationName">The property name in the destination object.</param>
            <param name="parse">Custom parser of the data.</param>
        </member>
        <member name="T:Nemiro.OAuth.ApiDataMappingItem">
            <summary>
            Represents data mapping item for API results.
            </summary>
        </member>
        <member name="M:Nemiro.OAuth.ApiDataMappingItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nemiro.OAuth.ApiDataMappingItem"/> class.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.ApiDataMappingItem.SourceName">
            <summary>
            Gets or sets the key name in the data source.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.ApiDataMappingItem.DestinationName">
            <summary>
            Gets or set the property name in the destination object.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.ApiDataMappingItem.Type">
            <summary>
            Gets or sets the data type of the property in the destination object.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.ApiDataMappingItem.Format">
            <summary>
            Gets or sets the data format.
            </summary>
        </member>
        <member name="P:Nemiro.OAuth.ApiDataMappingItem.Parse">
            <summary>
            Gets or sets a custom parser of the data.
            </summary>
        </member>
    </members>
</doc>
